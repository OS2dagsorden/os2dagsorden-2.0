<?php

/*************************************************************
        DRUPAL HOOKS
*************************************************************/

/**
 * Implementation of hook_init();
 */
function context_export_init() {
  if (variable_get('context_export_automatic')) {
    context_export_export_contexts(TRUE);
  }
}
 
/**
 * Implementation of hook_permission()
 */
function context_export_permission() {
  $data = array(
    'administer context export' => array(
      'title'       => t('Administer Context Export'), 
      'description' => t('Perform administration tasks for Context Export.'),
    ),
    'use content export' => array(
      'title'       => t('Use Context Export'),
      'description' => t('Use Context Export to automatically export Contexts.'),
    ),
  );
  
  return $data;
}

/**
 * Implementation of hook_menu();
 */
function context_export_menu() {
  $items['admin/structure/context/context_export'] = array(
    'title' => 'Export Settings', 
    'page callback' => 'context_export_settings_page', 
    'access arguments' => array('administer context export'), 
  );
  
  $items['admin/structure/context/context_export/export'] = array(
    'title' => 'Export Contexts',
    'page callback' => 'context_export_export_contexts',
    'access arguments' => array('use content export' ),
  );

  return $items;
}

/**
 * Implementation of hook_page_alter();
 */
function context_export_page_alter(&$page) {
  if ($_GET['q'] == 'admin/structure/context') {
    $page['content']['content_export'] = array(
      '#markup' => l(t('Export all overridden Contexts to code'), 'admin/structure/context/context_export/export'),
      '#weight' => -2,
    );
    
    // force re-sorting so our weight value above kicks in
    $page['content']['#sorted'] = 0;  
  }
}

/*************************************************************
        MODULE HOOKS
*************************************************************/

/**
 * Implementation of hook_ctools_plugin_api();
 */
function context_export_ctools_plugin_api($module, $api) {
  if ($module == 'context' && $api == 'context') {
    return array('version' => 3); 
  }
}

/**
 * Implementation of hook_context_default_contexts();
 */
function context_export_context_default_contexts() {
  $contexts = array();  
    
  // scan for exported Contexts and provide them as default Contexts  
  if ($path = _context_export_get_path()) {
    foreach (file_scan_directory($path, '/\.context\.inc$/i') as $file) {
      $content = file_get_contents($file->uri);
      
      $context = NULL;
      eval($content);
      
      if ($context) {
        $contexts[$context->name] = $context;
      }
    }  
  }

  return $contexts;
}

/*************************************************************
        CALLBACKS
*************************************************************/

/**
 * Callback for admin/structure/context/context_export;
 */
function context_export_settings_page() {
  $output = '';
  
  $form = drupal_get_form('context_export_settings_form');
  
  $output .= render($form);
  
  return $output;
}

/**
 * Callback for admin/structure/context/context_export/export;
 * May also be called from context_export_init with $auto = TRUE;
 */
function context_export_export_contexts($auto = FALSE) {
  if ($path = _context_export_get_path()) {
    $path .= '/';
    
    if (is_writable($path)) {
      $count = 0;
      
      foreach (context_context_list() as $name) {
        $context = context_load($name);
        
        // we don't export contexts unless they are a) changed non-problematic or b) non-exported
        if (in_array($context->type, array('Normal', 'Overridden'))) {
          $export = context_export($context);
          
          $file = $path . $context->name . '.context.inc';
          
          // write exported data
          try {
            $handler = fopen($file, 'w');
            fwrite($handler, $export);
            fclose($handler);
            
            $count++;
          }
          catch (Exception $e) {
            drupal_set_message(t($e->getMessage()), 'error');
          }
          
          // revert the Context to its default (in code) state
          ctools_export_crud_delete('context', $context);
        }
      }
      
      // don't display messages if we're doing automatic exports on every page load
      if (!$auto) {
        if ($count == 1) {
          drupal_set_message(t('Overridden Context has been exported to code.')); 
        }
        elseif ($count > 1) {  
          drupal_set_message(t('All overridden Contexts have been exported.')); 
        }
        else {
          drupal_set_message(t('No overridden Contexts found.')); 
        }
      }
    }
    else {
      drupal_set_message(t('Cannot export Contexts. Path is not writable.'), 'error'); 
    }
  }
  
  if (!$auto) {
    drupal_goto('admin/structure/context');
  }
}

/*************************************************************
        FORMS
*************************************************************/

/**
 * Module configuration form;
 */
function context_export_settings_form() {
  $form = array();
  
  $path = _context_export_get_path();
  
  if (empty($path)) {
    drupal_set_message(t('Exports Path must be set!'), 'warning'); 
  }
  elseif (!is_writable($path)) {
    drupal_set_message(t('Exports Path directory must be writable!'), 'error'); 
  }
  
  $form['context_export_path'] = array(
    '#type'           => 'textfield',
    '#title'          => t('Exports Path'),
    '#description'    => t('File system path where the exported Contexts will be saved (ex. sites/all/contexts). This directory must be writable.'),
    '#default_value'  => $path,
  );
  
  $form['context_export_automatic'] = array(
    '#type'           => 'checkbox',
    '#title'          => t('Automatic Export'),
    '#description'    => t('Enables automatic export of all overridden contexts on every page load. Do not enable in production environments.'),
    '#default_value'  => variable_get('context_export_automatic'),
  );
  
  return system_settings_form($form); 
}

/*************************************************************
        THEMING
*************************************************************/

/*************************************************************
        HELPERS / API
*************************************************************/

/*************************************************************
        INTERNAL
*************************************************************/

/**
 * Gets the export path from the settings table, cleans it up and returns it.
 */
function _context_export_get_path() {
  $path = variable_get('context_export_path');
  $path = trim($path, '/');
  
  return $path; 
}










