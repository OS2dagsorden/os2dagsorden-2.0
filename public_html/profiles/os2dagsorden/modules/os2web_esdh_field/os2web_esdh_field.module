<?php

/**
 * @file
 * Implements a field for displaying ESDH Cases directly.
 */

define('ACADRE_CM_ACCESS_OPEN_CASE', '3');
define('ACADRE_CM_ACCESS_OPEN_DOCUMENT', '3');

/* Field information hooks */

/**
 * Implements hook_field_info().
 */
function os2web_esdh_field_field_info() {
  return array(
    'os2web_esdh_field_case_ident' => array(
      'label' => t('ESDH Case'),
      'description' => t('Sags-id skal være på formen år/nummer eller år-nummer. Kun én værdi er tilladte.'),
      'default_widget' => 'os2web_esdh_field_case_ident_wid',
      'default_formatter' => 'os2web_esdh_field_case_ident_for',
    ),
    'os2web_esdh_field_doc_ident' => array(
      'label' => t('ESDH Document'),
      'description' => t('Dokument-id skal være på formen nummer/år eller nummer-år. Flere dokumenter skal være adskildt af , (komma).'),
      'default_widget' => 'os2web_esdh_field_doc_ident_wid',
      'default_formatter' => 'os2web_esdh_field_doc_ident_for',
    ),
  );
}

/**
 * Implements hook_field_formatter_info().
 */
function os2web_esdh_field_field_formatter_info() {
  return array(
    'os2web_esdh_field_case_ident_for' => array(
      'label' => t('ESDH Case includer'),
      'field types' => array('os2web_esdh_field_case_ident'),
    ),
    'os2web_esdh_field_doc_ident_for' => array(
      'label' => t('ESDH Document includer'),
      'field types' => array('os2web_esdh_field_doc_ident'),
    ),
  );
}

/**
 * Implements hook_field_widget_info().
 */
function os2web_esdh_field_field_widget_info() {

  return array(
    'os2web_esdh_field_case_ident_wid' => array(
      'label' => t('Case Identifier'),
      'field types' => array('os2web_esdh_field_case_ident'),
    ),
    'os2web_esdh_field_doc_ident_wid' => array(
      'label' => t('Document Identifier'),
      'field types' => array('os2web_esdh_field_doc_ident'),
    ),
  );
}

/**
 * Implements hook_field_widget_form().
 */
function os2web_esdh_field_field_widget_form(&$form, &$form_state, $field, $instance, $langcode, $items, $delta, $element) {
  $field_name = $field['field_name'];
  $field_type = $field['type'];
  $default = '';
  if (isset($form_state['node']->{$field_name}[$langcode][$delta][$field_type])) {
    $default = ($form_state['node']->{$field_name}[$langcode][$delta][$field_type])? : 0;
  }
  switch ($instance['widget']['type']) {
    case 'os2web_esdh_field_case_ident_wid':
      $element['os2web_esdh_field_case_ident'] = array(
        '#type' => 'textfield',
        '#title' => check_plain($element['#title']),
        '#description' => check_plain($element['#description']),
        '#default_value' => $default,
        '#required' => $element['#required'],
        '#weight' => isset($element['#weight']) ? $element['#weight'] : 0,
        '#delta' => $delta,
      );
      break;

    case 'os2web_esdh_field_doc_ident_wid':
      $element['os2web_esdh_field_doc_ident'] = array(
        '#type' => 'textfield',
        '#title' => check_plain($element['#title']),
        '#description' => check_plain($element['#description']),
        '#default_value' => $default,
        '#required' => $element['#required'],
        '#weight' => isset($element['#weight']) ? $element['#weight'] : 0,
        '#delta' => $delta,
      );
      break;
  }
  return $element;
}

/**
 * Implements hook_field_is_empty().
 */
function os2web_esdh_field_field_is_empty($item, $field) {
  if (isset($item['os2web_esdh_field_case_ident']) && empty($item['os2web_esdh_field_case_ident'])) {
    return TRUE;
  }
  if (isset($item['os2web_esdh_field_doc_ident']) && empty($item['os2web_esdh_field_doc_ident'])) {
    return TRUE;
  }
  return FALSE;
}

/**
 * Implements hook_field_validate().
 */
function os2web_esdh_field_field_validate($entity_type, $entity, $field, $instance, $langcode, $items, &$errors) {
  foreach ($items as $delta => $item) {

    // Validate all esdh case fields
    if (isset($item['os2web_esdh_field_case_ident'])) {
      $cases = explode(',', $item['os2web_esdh_field_case_ident']);
      foreach ($cases as $value) {
        $value = trim($value);
        // Adopt this for further testing.
        $valid = preg_match('/^\d{2,4}[-,\/]\d{1,20}$/', $value);
        if (!$valid && ($value != '')) {
          $errors[$field['field_name']][$langcode][$delta][] = array(
            'error' => 'Ugyldig fremstilling af sags-id. Sags-id skal være på formen år/nummer eller år-nummer. Flere sager skal være adskilt af , (komma).',
            'message' => t('%name: illegal value.', array('%name' => $instance['label'])),
          );
        }
      }
    }

    if (isset($item['os2web_esdh_field_doc_ident'])) {
      // Validate all esdh doc fields
      $docids = explode(',', $item['os2web_esdh_field_doc_ident']);
      foreach ($docids as $docid) {
        $docid = trim($docid);
        // Adopt this for further testing.
        $valid = preg_match('/^\d{1,20}[-,\/]\d{2}$/', $docid);
        if (!$valid && ($docid != '')) {
          $errors[$field['field_name']][$langcode][$delta][] = array(
            'error' => 'Ugyldig fremstilling af dokument-id. Dokument-id skal være på formen nummer/år eller nummer-år. Flere dokumenter skal være adskildt af , (komma).',
            'message' => t('%name: illegal value.', array('%name' => $instance['label'])),
          );
        }
      }
    }
  }
}

/**
 * Implements hook_field_formatter_view().
 */
function os2web_esdh_field_field_formatter_view($entity_type, $entity, $field, $instance, $langcode, $items, $display) {
  $element = array();
  switch ($display['type']) {
    case 'os2web_esdh_field_case_ident_for':
      foreach ($items as $delta => $item) {
        if ($item['os2web_esdh_field_case_ident']) {
          $cases = array();
          $ids = explode(',', $item['os2web_esdh_field_case_ident']);
          // error_log("Var: \$ids = " . print_r($ids, 1));
          foreach ($ids as $id) {
            $cases[] = trim($id);
          }
          $element[$delta]['#markup'] = '<div class="fullcaserender">' . theme('os2web_esdh_case', array('id' => $cases)) . '</div>';
        }
      }
      break;

    case 'os2web_esdh_field_doc_ident_for':
      foreach ($items as $delta => $item) {
        if ($item['os2web_esdh_field_doc_ident']) {
          $docs = array();
          $ids = explode(',', $item['os2web_esdh_field_doc_ident']);
          foreach ($ids as $id) {
            $docs[] = trim($id);
          }
          $element[$delta]['#markup'] = '<div class="documenttable">' . theme('os2web_esdh_document', array('id' => $docs)) . '</div>';
        }
      }
      break;
  }
  return $element;
}

/**
 * Implements hook_theme().
 */
function os2web_esdh_field_theme() {
  return array(
    'os2web_esdh_case' => array(
      'variables' => array('id' => FALSE),
    ),
    'os2web_esdh_document' => array(
      'variables' => array('id' => FALSE),
    ),
  );
}

/**
 * Implements theme_IDENTIFIER().
 */
function theme_os2web_esdh_case($vars) {

  if (!function_exists('os2web_esdh_provider_has_api')) {
    return '';
  }

  // Check for correct api and required functions are implemented.
  if (!os2web_esdh_provider_has_api('cm')) {
    drupal_set_message(t('Error in case lookup API. Check status.'), 'error');
    return '';
  }
  $ids = $vars['id'];
  if (!is_array($ids)) {
    $ids = array($ids);
  }
  $docids = array();
  try {
    foreach ($ids as $id) {
      if (_os2web_esdh_field_case_access($id)) {
        $docids = array_merge($docids, os2web_esdh_provider_invoke('cm', 'get_case_docs', $id));
      }
    }
  } catch (Exception $e) {
    // Show a polite message if the connection to Acadre is broken.
    $markup = '<div class="messages error"><ul><li>';
    $markup .= t('There was a problem connecting to the case service provider. Sorry for the inconvenience.');
    $markup .= '</li></ul></div>';

    $page['region'] = array(
      '#type' => 'markup',
      '#markup' => $markup,
    );
    return render($page);
  }
  $html = theme('os2web_esdh_document', array('id' => $docids, 'iscase' => TRUE));
  return $html;
}

/**
 * Implements theme_IDENTIFIER().
 */
function theme_os2web_esdh_document($vars) {

  if (!function_exists('os2web_esdh_provider_has_api')) {
    return '';
  }

  // Check for correct api and required functions are implemented.
  if (!os2web_esdh_provider_has_api('cm')) {
    drupal_set_message(t('Error in document lookup API. Check status.'), 'error');
    return '';
  }
  $id = $vars['id'];
  if (!is_array($id)) {
    $id = array($id);
  }
  $html = '';
  $rows = array();
  foreach ($id as $docid) {
    $file = _os2web_esdh_field_get_file_by_did($docid);
    if (is_object($file) && $document_meta = os2web_esdh_provider_invoke('cm', 'get_document', $docid)) {
      $rows[] = array(
        l($document_meta['title'], file_create_url($file->uri), array('attributes' => array('target' => '_blank'))) . '<span class="documentdate">' . format_date(strtotime($document_meta['last_update']), 'custom', 'd/m/Y') . '</span>',
      );
    }
    else {
      // Add the documet to be updated trough cron.
      _os2web_esdh_field_add_to_cron($docid);
    }
  }
  if (count($rows) == 0) {
    if (isset($vars['iscase'])) {
      $html .= '<p>' . t('This case contains no public documents.') . '</p>';
    }
    return $html;
  }
  $html .= theme('table', array('rows' => $rows));
  return $html;
}
/**
 * Checks access conditions for a case.
 *
 * @param int $caseid
 *   Case id
 *
 * @return bool
 *   True on access granted
 */
function _os2web_esdh_field_case_access($caseid) {
  $case = os2web_esdh_provider_invoke('cm', 'get_case_data', $caseid);
  if (FALSE === $case) {
    return FALSE;
  }
  $access_grant = array(
    'accesscode' => 'KK',
    'restricted' => ACADRE_CM_ACCESS_OPEN_CASE,
  );
  $access = array(
    'accesscode' => $case['access_code'],
    'restricted' => $case['restricted_from_public'],
  );
  return _os2web_esdh_field_array_compare($access, $access_grant);
}

/**
 * Checks access conditions for a document.
 *
 * @param int $docid
 *   Document id
 *
 * @return bool
 *   True on access granted
 */
function _os2web_esdh_field_doc_access($docid) {
  $doc = os2web_esdh_provider_invoke('cm', 'get_document', $docid);
  $access_grant = array(
    'accesscode' => 'KK',
    'publication' => ACADRE_CM_ACCESS_OPEN_DOCUMENT,
    'lockstatus' => TRUE,
  );
  $access = array(
    'accesscode' => $doc['access_code'],
    'publication' => $doc['publication_indicator'],
    'lockstatus' => $doc['lock_status'],
  );
  return _os2web_esdh_field_array_compare($access, $access_grant);
}

/**
 * Helper function that compares two arrays.
 * @access protected
 *
 * @param array $a1
 *   First array
 * @param array $a2
 *   Second array
 *
 * @return bool
 *   True if all keys in $a1 is equivilent in $a2
 */
function _os2web_esdh_field_array_compare(array $a1, array $a2) {
  $result = TRUE;
  foreach ($a1 as $key => $value) {
    if (isset($a2[$key]) && $a2[$key] === $value) {
      $result = $result && TRUE;
    }
    else {
      $result = $result && FALSE;
    }
  }
  return $result;
}

/**
 * Implements hook_node_insert().
 */
function os2web_esdh_field_node_insert($node)
{
  if(!empty($node->field_os2web_base_field_case)) {
    _os2web_esdh_field_update_cm_documents_from_pws($node);
  }
}

/**
 * Implements hook_node_update().
 */
function os2web_esdh_field_node_update($node)
{
  if(!empty($node->field_os2web_base_field_case)) {
    _os2web_esdh_field_update_cm_documents_from_pws($node);
  }
}

/**
 * Helper function to call the PWS and put documents in queue for updates.
 *
 * @param  Object $node
 *   The node.
 */
function _os2web_esdh_field_update_cm_documents_from_pws($node) {
  // Check for correct api and required functions are implemented.
  if (!os2web_esdh_provider_has_api('cm')) {
    return;
  }

  $cases = explode(',', preg_replace('/\s+/', '', $node->field_os2web_base_field_case[LANGUAGE_NONE][0]['os2web_esdh_field_case_ident']));
  $documents = explode(',', preg_replace('/\s+/', '', $node->field_os2web_base_field_doc[LANGUAGE_NONE][0]['os2web_esdh_field_doc_ident']));

  // Translate the document to correct ID.
  foreach ($documents as &$document) {
    // Translate the SSSSSS/YY serial into database identifier.
    if (!is_numeric($document)) {
      $document = ops2web_acadre_esdh_lookup_doc($doc_id);
    }
  }

  foreach ($cases as $key => $case_id) {
    try {
      $case = os2web_esdh_provider_invoke('cm', 'get_case_data', $case_id);

      if (!$case) {
        // Ignore failed case lookups.
        continue;
      }

      if (_os2web_esdh_field_case_access($case_id)) {
        // Document has the appropiate access settings.
        $documents = array_merge($documents, os2web_esdh_provider_invoke('cm', 'get_case_docs', $case_id));
      }
    } catch(Exception $e) {
      watchdog('os2web_esdh_field', $e, NULL, WATCHDOG_ERROR);
    }
  }

  $documents = array_filter($documents);

  if (count($documents)) {
    foreach ($documents as $document_id) {
      _os2web_esdh_field_add_to_cron($document_id);
    }
  }
}

/**
 * Implements hook_cron().
 */
function os2web_esdh_field_cron() {
  // Check for correct api and required functions are implemented.
  if (!os2web_esdh_provider_has_api('cm')) {
    return;
  }

  _os2web_esdh_field_add_all_documents_to_requeue();

  // Get documents which needs updating and put them in a queue.
  $queue = DrupalQueue::get('os2web_esdh_field_cm_doc_queue');

  if ($queue->numberOfItems() == 0) {
    $query = db_select('os2web_esdh_field_cm_documents', 'd')
      ->fields('d')
      ->condition('job_info', 'update')
      ->orderBy('d.last_updated', 'DESC')
      ->range(0, 100);
    $documents = $query->execute()->fetchAll(PDO::FETCH_ASSOC);
    watchdog('os2web_esdh_field', 'Adding %count documents to update queue.', array('%count' => count($documents)), WATCHDOG_INFO);
    if (count($documents)) {
      foreach ($documents as $document) {
        $queue->createItem($document);
      }
    }
  }
}

/**
 * Re-queues all cases from all documents.
 */
function _os2web_esdh_field_add_all_documents_to_requeue() {
  // Check for correct api and required functions are implemented.
  if (!os2web_esdh_provider_has_api('cm')) {
    return;
  }

  // 1.
  // Get all documents we now, and ask CM of new ones..
  $old_documents = db_select('os2web_esdh_field_cm_documents', 'd')
    ->condition('job_info', 'update', '!=')
    ->fields('d')
    ->execute()
    ->fetchAll(PDO::FETCH_ASSOC);

  $old_cases = db_select('field_data_field_os2web_base_field_case', 'd')
    ->fields('d', array('field_os2web_base_field_case_os2web_esdh_field_case_ident'))
    ->execute()
    ->fetchAll(PDO::FETCH_ASSOC);

  $document_to_update = array();

  foreach ($old_documents as $old_document) {
    $document_to_update[$old_document['did']] = $old_document['last_updated'];
  }

  foreach ($old_cases as $old_case) {
    $case_ids = explode(',', preg_replace('/\s+/', '', $old_case['field_os2web_base_field_case_os2web_esdh_field_case_ident']));
    foreach ($case_ids as $case_id) {
      if (!empty($case_id)) {
        // Get all cases documents from CM. If any new are added, they are also
        // added to the queue.
        $retrived_documents = os2web_esdh_provider_invoke('cm', 'get_case_docs', $case_id);
        foreach ($retrived_documents as $retrived_document) {
          if (!isset($document_to_update[$retrived_document])) {
            $document_to_update[$retrived_document] = '1970-01-01 00:00:00';
          }
        }
      }
    }
  }

  // 2.
  // Get all meta data for every document we now.
  $newest_documents = array();
  $esdh_documents = os2web_esdh_provider_invoke('cm', 'get_documents', array_keys($document_to_update));

  // 3. Update all documents which has a newer version.
  foreach ($esdh_documents as $esdh_document) {
    if(isset($document_to_update[$esdh_document->DocumentIdentifier]) &&
       strtotime($document_to_update[$esdh_document->DocumentIdentifier]) < strtotime($esdh_document->ChangedDateTime) &&
       _os2web_esdh_field_doc_access($esdh_document->DocumentIdentifier) &&
       _os2web_esdh_field_case_access($esdh_document->CaseFileReference)) {

      _os2web_esdh_field_add_to_cron($esdh_document->DocumentIdentifier);
    }
  }
}

/**
 * Implements hook_cron_queue_info().
 */
function os2web_esdh_field_cron_queue_info() {
  $queues['os2web_esdh_field_cm_doc_queue'] = array(
    'worker callback' => '_os2web_esdh_field_update_document',
    'time' => 300,
  );
  return $queues;
}

/**
 * Cron worker function to update a document from Acadre PWS.
 * @param  array $document
 *   The document
 */
function _os2web_esdh_field_update_document($document) {
  if (isset($document['did'])) {

    $doc = os2web_esdh_provider_invoke('cm', 'get_document', $document['did']);
    if (_os2web_esdh_field_doc_access($document['did'])) {
      // Only show public documents.
      if (($doc !== FALSE) && _os2web_esdh_field_case_access($doc['case_reference'])) {
        $file = os2web_esdh_provider_invoke('cm', 'get_document_file', $document['did']);
        if (isset($file->fid)) {
          db_update('os2web_esdh_field_cm_documents')
            ->fields(array(
              'fid' => $file->fid,
              'job_info' => 'updated',
              'last_updated' => date("Y-m-d H:i:s", time()),
            ))
            ->condition('did', $document['did'])
            ->execute();

          watchdog('os2web_esdh_field', 'Document (did: %did, fid: %fid) was updated from ESDH.', array('%did' => $document['did'], '%fid' => $file->fid), WATCHDOG_INFO);
          return TRUE;
        }
      }
    }
    _os2web_esdh_field_delete_doc_by_did($document['did']);
    watchdog('os2web_esdh_field', 'Document (did: %did) deleted fom queue.', array('%did' => $document['did']), WATCHDOG_INFO);
  }
}

/**
 * Helper function to get the file instance of a document.
 *
 * @param  [int] $document_id The document ID
 * @return Object             The drupal file Object.
 */
function _os2web_esdh_field_get_file_by_did($document_id) {

  $doc_in_db = _os2web_esdh_field_get_doc_by_did($document_id);

  if ($doc_in_db && !empty($doc_in_db['fid'])) {
    return file_load($doc_in_db['fid']);
  }
  return NULL;
}

/**
 * Helper function to get the document by document id.
 *
 * @param  [int] $document_id The document ID
 * @return array             The document.
 */
function _os2web_esdh_field_get_doc_by_did($document_id) {
  $doc_in_db = db_select('os2web_esdh_field_cm_documents', 'd')
    ->fields('d')
    ->condition('did', $document_id)
    ->execute()
    ->fetchAssoc();

  return $doc_in_db;
}

/**
 * Helper function to delete an document from out table.
 *
 * @param  [int] $document_id The document ID
 */
function _os2web_esdh_field_delete_doc_by_did($document_id) {
  $doc_in_db = db_delete('os2web_esdh_field_cm_documents')
    ->condition('did', $document_id)
    ->execute();
}

/**
 * Helper function to add an document to the cron table.
 *
 * If the entry allready exists it will be updated to be processed again.
 *
 * @param  int $document_id
 *   The document ID
 */
function _os2web_esdh_field_add_to_cron($document_id)
{
  $doc_in_db = db_select('os2web_esdh_field_cm_documents', 'd')
    ->fields('d')
    ->condition('did', $document_id)
    ->execute()
    ->fetchAssoc();
  if (!$doc_in_db) {
    db_insert('os2web_esdh_field_cm_documents')->fields(array('did', 'job_info'))
      ->values(array(
        'did' => $document_id,
        'job_info' => 'update'
      ))
      ->execute();
  }
  else {
    db_update('os2web_esdh_field_cm_documents')
      ->fields(array(
        'job_info' => 'update',
      ))
      ->condition('did', $document_id)
      ->execute();
  }
}

/**
 * Implements hook_os2web_help().
 */
function os2web_esdh_field_os2web_help($sections) {

  // Fields.
  $sections['fields'] = t('<p><b>Link to cases and documents:</b> Many contenttypes has ability to link to cases and documents in the ESDH case system. When pages gets linked to cases and documents, links to them will automatically gets generated at the bottom of the page.</p>');

  return $sections;
}
