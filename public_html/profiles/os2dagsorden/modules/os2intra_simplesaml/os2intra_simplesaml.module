<?php

/**
 * Implements hook_menu()
 */
function os2intra_simplesaml_menu() {
  $items = array();

  $items['admin/config/os2intra'] = array(
    'title' => 'OS2Intra Setup',
    'description' => 'Manage OSIntra settings',
    'position' => 'right',
    'weight' => -15,
    'access arguments' => array('administer os2intra'),
    'page callback' => 'system_admin_menu_block_page',
    'file' => 'system.admin.inc',
    'file path' => drupal_get_path('module', 'system'),
    'type' => MENU_NORMAL_ITEM,
  );

  $items['admin/config/os2intra/simplesaml'] = array(
    'title' => 'OS2Intra SimpleSAML',
    'description' => 'Administer SimpleSAML',
    'page callback' => 'drupal_get_form',
    'page arguments' => array('os2intra_simplesaml_settings_form'),
    'access arguments' => array('administer os2intra simplesaml')
  );

  return $items;
}

/**
 * Implements hook_monolog_channel_info().
 *
 * @return array
 */
function os2intra_simplesaml_monolog_channel_info() {
  $channels = array();

  $my_module_name = basename(__FILE__, '.module');
  $channels[$my_module_name] = array(
    'label' => t($my_module_name),
    'description' => t('The default channel that os2logging messages are routed through.'),
    'default profile' => '$my_module_name',
  );

  return $channels;
}

/**
 * Form callback for settings
 */
function os2intra_simplesaml_settings_form($form, &$form_state) {
  $form['os2intra_simplesaml_simplesaml_enable'] = array(
    '#title' => t('Enabled SimpleSAML redirect'),
    '#type' => 'checkbox',
    '#default_value' => variable_get('os2intra_simplesaml_simplesaml_enable')
  );

  $form['os2intra_simplesaml_redirected_ips'] = array(
    '#title' => t('Redirect IP\'s to SimpleSAML login'),
    '#type' => 'textfield',
    '#description' => t('Comma separated. Ex. 192.168.1.1,192.168.2.1'),
    '#default_value' => variable_get('os2intra_simplesaml_redirected_ips')
  );

  return system_settings_form($form);
}

/**
 * Implements hook_form_validate().
 */
function os2intra_simplesaml_settings_form_validate($form, &$form_state) {
  if (preg_match("/[^0-9.,]/", $form_state['values']['os2intra_simplesaml_redirected_ips'])) {
    form_set_error('os2intra_simplesaml_redirected_ips', 'Invalid format');
  }
}

/**
 * Implements hook_user_login().
 *
 * Updates the user's LOOP account details.
 */
function os2intra_simplesaml_user_login(&$edit, $account) {
  //$attributes = simplesamlphp_auth_get_attributes();

#  if (!empty($attributes)) {
#    if (isset($attributes['http://schemas.xmlsoap.org/ws/2005/05/identity/claims/givenname'])) {
#      $edit['field_name_first'][LANGUAGE_NONE][0]['value'] = $attributes['http://schemas.xmlsoap.org/ws/2005/05/identity/claims/givenname'];
#    }
#    if (isset($attributes['http://schemas.xmlsoap.org/ws/2005/05/identity/claims/surname'])) {
#      $edit['field_name_last'][LANGUAGE_NONE][0]['value'] = $attributes['http://schemas.xmlsoap.org/ws/2005/05/identity/claims/surname'];
#    }
#    if (isset($attributes['http://schemas.xmlsoap.org/ws/2005/05/identity/claims/emailaddress'])) {
#      $edit['mail'] = $attributes['http://schemas.xmlsoap.org/ws/2005/05/identity/claims/emailaddress'];
#    }
#    user_save($account, $edit);
#  }

  if (isset($_SESSION['nemlogin_pid'])) {
    $nemlogin_pid = $_SESSION['nemlogin_pid'];

    watchdog('os2intra_simplesaml', 'Attemping to login with PID (%pid) started for user %login (uid: %uid).', array(
      '%pid' => $nemlogin_pid,
      '%login' => $account->name,
      '%uid' => $account->uid
    ));

    //check if account has PID stored in system
    $pid = db_select("os2intra_simplesaml_nemid_pid_mapping", "os2pid")
      ->fields("os2pid", array("pid"))
      ->condition("uid", $account->uid)
      ->execute()
      ->fetchField();

    if (!empty($pid)) {
      // if yes - is the PID the same?
      if (strcasecmp($pid, $nemlogin_pid) != 0) {
        // NO = the PID in the system and $_SESSION do not match, prevent login
        module_invoke_all('user_logout', $account);
        // Destroy the current session, and reset $user to the anonymous user.
        session_destroy();

        drupal_set_message(t("The user you are trying to login with is already associated with different PID"), 'warning');
        watchdog('user', 'Session closed for %name.', array('%name' => $account->name));

        watchdog('os2intra_simplesaml', 'The PID (%pid1) associated with this user %login (uid: %uid) does not match the PID (%pid2) from request headers.', array(
          '%pid1' => $pid,
          '%pid2' => $nemlogin_pid,
          '%login' => $account->name,
          '%uid' => $account->uid
        ));
        watchdog('os2intra_simplesaml', 'Session closed for user %name (uid: %uid)', array(
          '%name' => $account->name,
          '%uid' => $account->uid
        ));

        drupal_goto();
      }
    }
    else {
      //If no, store this PID for the user
      $num_updated = db_update('os2intra_simplesaml_nemid_pid_mapping')
        ->fields(array(
          'pid' => $nemlogin_pid,
          'changed' => REQUEST_TIME,
        ))
        ->condition('uid', $account->uid)
        ->execute();

      //not updated, new entry
      if (!$num_updated) {
        db_insert('os2intra_simplesaml_nemid_pid_mapping')
          ->fields(array(
            'uid' => $account->uid,
            'pid' => $nemlogin_pid,
            'changed' => REQUEST_TIME,
          ))
          ->execute();
      }

      watchdog('os2intra_simplesaml', 'Mapping new PID (%pid) with user %login (uid: %uid)', array(
        '%pid' => $nemlogin_pid,
        '%login' => $account->name,
        '%uid' => $account->uid
      ));
    }

    watchdog('os2intra_simplesaml', 'User %login (uid: %uid) successfully logged in with PID (%pid).', array(
      '%pid' => $nemlogin_pid,
      '%login' => $account->name,
      '%uid' => $account->uid
    ));
  }
}

/**
 * Implements hook_boot().
 */
function os2intra_simplesaml_boot() {
  // Do not run this from CLI.
  if (php_sapi_name() != 'cli' && $GLOBALS['user']->uid == 0) {
    $custom_ips = explode(',', variable_get('os2intra_simplesaml_redirected_ips'));
    $remote_ip = $_SERVER['REMOTE_ADDR'];

    if (variable_get('os2intra_simplesaml_simplesaml_enable')) {
      foreach ($custom_ips as $custom_ip) {
        // If we the client request is from one of the IP's, login using SimpleSAMLphp; otherwise use nemid login
        if ($remote_ip == $custom_ip) {
          if (!in_array($_GET['q'], array('saml_login', 'user/logout'))) {
            require_once(DRUPAL_ROOT . '/includes/common.inc');
            require_once(DRUPAL_ROOT . '/includes/path.inc');

            drupal_load('module', 'user');
            drupal_goto('saml_login', array('query' => drupal_get_destination()));
          }
        }
      }
    }

    //redirect to Nemid Login
    if (!in_array($remote_ip, $custom_ips)) {
      require_once(DRUPAL_ROOT . '/includes/common.inc');
      require_once(DRUPAL_ROOT . '/includes/path.inc');
      require_once(DRUPAL_ROOT . '/includes/menu.inc');

      drupal_load('module', 'user');
      
      if (!$_SESSION['nemlogin_pid'] && strpos($_GET['q'], 'nemid') !== 0) {
        //unsetting session in case it had any nemid errors
        unset($_SESSION['nemid_login']);

        //redirecting only if module exists and path is valid
        if (drupal_valid_path('nemid')) {
          drupal_goto('nemid');
        }
      }
    }
  }
}
