<?php
/**
 * os2dagsorden_adlib_api
 *
 * PHP version 5
 *
 * @category OS2Dagsorden
 * @package  OS2Dagsorden_Adlib_Api
 * @author   Jesper Mathiassen <jm@bellcom.dk>
 * @license  http://www.gnu.org/licenses/gpl-2.0.html GNU General Public License, version 2
 * @link     http://bellcom.dk
 */
define('ADLIB_TEST_FID', FALSE);
define('ADLIB_HTML_IMG_FOLDER', 'public://bpimg/');

/**
 * Implementation of hook_menu
 *
 * @return created menu links
 */
function os2dagsorden_adlib_api_menu() {
  $items['admin/config/os2dagsorden/adlibstatus'] = array(
      'title' => t('AdLib Status'),
      'description' => t('Provides an overview of known AdLib jobs.'),
      'access arguments' => array('administer os2web'),
      'page callback' => 'os2dagsorden_adlib_api_status',
      'type' => MENU_LOCAL_TASK,
  );
  $items['os2dagsorden/adlib/ajax/status/%'] = array(
      'page callback' => 'os2dagsorden_adlib_api_status_ajax',
      'page arguments' => array(4),
      'type' => MENU_CALLBACK,
      'access callback' => TRUE,
  );
  $items['os2dagsorden/adlib/test'] = array(
      'title' => t('AdLib test page'),
//    'description' => t('Your description goes here.'),
      'access arguments' => array('administer os2web'),
      'page callback' => 'os2dagsorden_adlib_api_page',
      'type' => MENU_CALLBACK,
  );
  $items['os2dagsorden/adlib/delete_all_jobs'] = array(
      'title' => 'AdLib delete all jobs',
      'access arguments' => array('administer os2web'),
      'page callback' => 'os2dagsorden_adlib_api_delete_all_jobs',
      'type' => MENU_CALLBACK,
  );

  return $items;
}

/**
 * Renderes the Adlib status page
 * 
 * @param mixed $fid file reference
 *
 * @return none
 */
function os2dagsorden_adlib_api_status_ajax($fid) {
  $file = db_select('os2web_adlib_api_doc_files', 'df')
      ->fields('df')
      ->condition('fid', $fid)
      ->execute()
      ->fetchObject();
  if (is_object($file)) {
    if ($file->job_id != '') {
      $adlib = _os2dagsorden_adlib_api_get_instance();
      $status = $adlib->getJobStatus($file->job_id);
      drupal_json_output($status->status);
    } else {
      drupal_json_output('Not queued.');
    }
  } else {
    drupal_json_output('Not found.');
  }
}

/**
 * Provides an overview of known AdLib jobs.
 * 
 * @access public
 * @return void
 */
function os2dagsorden_adlib_api_status() {
  if (isset($_GET['delete'])) {
    $query = db_delete('os2web_adlib_api_doc_files');
    if (is_numeric($_GET['delete'])) {
      $query = $query->condition('fid', $_GET['delete']);
    }
    $query->execute();
    drupal_goto('admin/config/os2dagsorden/adlibstatus');
  }
  if (isset($_GET['reset'])) {
    $query = db_delete('os2web_adlib_api_doc_files');
    $query = $query->condition('fid', $_GET['reset']);
    $query->execute();
    os2dagsorden_adlib_api_convert_to_pdf($_GET['reset']);
    drupal_goto('admin/config/os2dagsorden/adlibstatus');
  }
  if (isset($_GET['process'])) {
    _os2dagsorden_adlib_api_do_processing();
    drupal_goto('admin/config/os2dagsorden/adlibstatus');
  }
  $adlib = _os2dagsorden_adlib_api_get_instance();
  $head = array('Connector Name', 'status', 'Jobs');
  $statuslist = $adlib->getConnectorStatusList();
  $rows = array();
  foreach ($statuslist as $status) {
    $rows[] = array(
        $status->ServerDetail['ServerName'],
        ($status->ServerDetail['Enabled'] == 'True' ? 'E' : 'Not e') . 'nabled - ' . $status->ServerInfo['Status'],
        $status->ServerInfo['JobCount'],
    );
  }
  drupal_add_js(drupal_get_path('module', 'os2dagsorden_adlib_api') . '/js/os2dagsorden_adlib_api.js', 'file');
  $html = '<h2>Connector information</h2>';
  $html .= theme('table', array('header' => $head, 'rows' => $rows));
  $head = array('Fid', 'Job-id', 'Status', 'action');
  $rows = array();
  $files = db_query("SELECT * FROM {os2web_adlib_api_doc_files} WHERE job_id IS NULL OR job_id NOT LIKE 'Complete'");
  foreach ($files as $file) {
    $fdata = file_load($file->fid);
    $rows[] = array(
        l($fdata->uri, file_create_url($fdata->uri)),
        $file->job_id,
        array('data' => 'Looking up..', 'class' => 'status', 'id' => $file->fid),
        l('delete', 'admin/config/os2dagsorden/adlibstatus', array('query' => array('delete' => $file->fid))) . ' ' . l('reset', 'admin/config/os2dagsorden/adlibstatus', array('query' => array('reset' => $file->fid))),
    );
  }
  $html .= '<h2>Active jobs</h2>';
  $html .= theme('table', array('header' => $head, 'rows' => $rows));
  $html .= l('Delete all', 'admin/config/os2dagsorden/adlibstatus', array('query' => array('delete' => 'all')));
  $html .= ' - ' . l('Run processing', 'admin/config/os2dagsorden/adlibstatus', array('query' => array('process' => true)));
  return $html;
}

/**
 * Implementation of test page fallback
 *
 * @return none
 */
function os2dagsorden_adlib_api_page() {
  error_log('MARK - ' . basename(__FILE__) . ':' . __LINE__ . ' in ' . __FUNCTION__ . '()');
  $fid = 225735;

  $files = db_select('file_managed','fm')->fields('fm')->condition('filemime','application/msword')->execute();
  $rows = array();
  foreach ($files as $file) {
    if (file_exists(drupal_realpath($file->uri))) {
      $rows[]= array(l($file->fid, 'admin/config/os2dagsorden/adlibstatus', array('query' => array('reset' => $file->fid))) ,$file->filename);
    }
  }
  return theme('table',array('rows'=>$rows));

//  return '<textarea cols=100 rows=50>' . print_r($call, 1) . '</textarea>';
}

/**
 * Deletes all the jobs and the jobs folders on Adlib serer
 *
 * @return none
 */
function os2dagsorden_adlib_api_delete_all_jobs() {
    $adlib = _os2dagsorden_adlib_api_get_instance();

    $jobs = db_select('os2web_adlib_api_doc_files', 'adlib')
    ->fields('adlib', array('job_id', 'job_info'))
    //->condition('job_id', 'complete', '!=')
    ->execute()
    ->fetchAll();

    foreach ($jobs as $job){
      print_r($job->job_id);
      $jobfileinfo = unserialize($job->job_info);
      $folder = explode('\\',$jobfileinfo['basefolder']);
      print_r($folder[1]);
      $adlib->deleteJob($job->job_id);
      $adlib->deleteJobFolder($folder[1]);
    }
}

/**
 * Implementation of hook_cron
 *
 * @return none
 */
function os2dagsorden_adlib_api_cron() {
  _os2dagsorden_adlib_api_do_processing(100);
}

/**
 * Implementation of hook_init()
 *
 * @return none
 */
function os2dagsorden_adlib_api_init() {
  // _os2dagsorden_adlib_api_process_pdf(1);
}

/**
 * Main call to queue file for converting.
 *
 * @param int $fid    fid of a managed file
 * @param int $docref arbitrary identifier for later reference (ie. Doc id)
 *
 * @return boolean
 */
function os2dagsorden_adlib_api_convert_to_pdf($fid, $docref = NULL) {
  $file = file_load($fid);
  if (!file_exists(drupal_realpath($file->uri))) {
    watchdog('adlib_api', 'Cannot queue file %file. File does not exist.', array('%file' => $file->filename), WATCHDOG_WARNING);
    db_delete('os2web_adlib_api_doc_files')->condition('fid', $fid)->execute();
    return false;
  }
  if (!_os2dagsorden_adlib_api_is_file_pdf($fid)) {
    if (0 === db_query('SELECT fid from {os2web_adlib_api_doc_files} where fid = :fid AND jobtype = :jobtype', array(':fid' => $fid, ':jobtype' => 0))->rowCount()) {
      $record = array(
          'fid' => $fid,
          'did' => $docref,
          'jobtype' => 0,
      );
      drupal_write_record('os2web_adlib_api_doc_files', $record);
      if (ADLIB_TEST_FID) {
        error_log(basename(__FILE__) . ':' . __LINE__ . " jm@bellcom.dk: File queued for processing: ");
      }
      return TRUE;
    } else {
//      error_log(basename(__FILE__) . ':' . __LINE__ . " jm@bellcom.dk: File already in queue, aborting.");
      return FALSE;
    }
  } else {
//    error_log(basename(__FILE__) . ':' . __LINE__ . " jm@bellcom.dk: File already PDF.");
    $record = array(
        'fid' => $fid,
        'did' => $docref,
        'job_id' => 'Complete',
    );
    drupal_write_record('os2web_adlib_api_doc_files', $record);
    return FALSE;
  }
}

/**
 * Return the fid of a file saved with a reference
 *
 * @param int $ref Reference for the file
 *
 * @return int
 */
function os2dagsorden_adlib_api_get_fid($ref) {
  return (int) db_query('SELECT fid FROM {os2web_adlib_api_doc_files} WHERE did=:did', array(':did' => $ref))->fetchField();
}

/**
 * Factory for class instances. This allows easy changing between api classes.
 * TODO: Make this proper plugin-able.
 *
 * @return AdLibWS object
 */
function _os2dagsorden_adlib_api_get_instance() {
  $obj = &drupal_static(__FUNCTION__);
  if (is_object($obj))
    return $obj;
  module_load_include('inc', 'os2dagsorden_adlib_api', 'includes/AdLibWS.class');
  return $obj = new AdLibWS();
}

/**
 * Processes the entries, which were added to the database. Sends the jobs to Adlib and receives the completed jobs, updating the Drupal content.
 * 
 * @param mixed $limit limit for processing files 
 * @access protected
 *
 * @return none
 */
function _os2dagsorden_adlib_api_do_processing($limit = FALSE) {
  error_log('MARK - ' . basename(__FILE__) . ':' . __LINE__ . ' in ' . __FUNCTION__ . '()');
// Locate any finished jobs
  $files = db_select('os2web_adlib_api_doc_files', 'f')
      ->fields('f')
      ->isNotNull('job_id')
      ->condition('job_id', array('Complete'), 'NOT IN');
  if (ADLIB_TEST_FID) {
    $files = $files->condition('fid', ADLIB_TEST_FID);
  }
  if ($limit !== FALSE) {
    $files->range(0, $limit);
  }
  $files = $files->execute();
  if (count($files) > 0) {
    $adlib = _os2dagsorden_adlib_api_get_instance();

    foreach ($files as $file) {
      $jobinfo = $adlib->getJobStatus($file->job_id);
      if (in_array($jobinfo->status, array('Not found', 'Failed'))) {
        $jobfileinfo = unserialize($file->job_info);
        $adlib->deleteJob($file->job_id);
        $folder = explode('\\', $jobfileinfo['basefolder']);
        $adlib->deleteJobFolder($folder[1]);


        $fdata = file_load($file->fid);
        if (!file_exists(drupal_realpath($fdata->uri)) || file_uri_scheme($fdata->uri) == '' || $fdata->filemime=='application/pdf' ) {
          watchdog('adlib_api', 'Cannot re-queue file %file. File does not exist or is invalid.', array('%file' => $fdata->filename), WATCHDOG_WARNING);
          db_delete('os2web_adlib_api_doc_files')->condition('fid', $file->fid)->execute();
        } else {
          $record = array(
              'fid' => $file->fid,
              'jobtype' => $file->jobtype,
              'job_id' => null,
              'job_info' => null,
          );
          drupal_write_record('os2web_adlib_api_doc_files', $record, array('fid', 'jobtype'));
          error_log(basename(__FILE__) . ':' . __LINE__ . " jm@bellcom.dk: Job failed and reset: " . $file->fid);
          watchdog('adlib_api', 'Found a failed job for %file. Resetting.', array('%file' => $fdata->filename), WATCHDOG_WARNING);
        }
      } elseif (in_array($jobinfo->status, array('Complete'))) {
        $record = array(
            'fid' => $file->fid,
            'jobtype' => $file->jobtype,
            'job_id' => 'Complete',
        );
        $jobfileinfo = unserialize($file->job_info);

        error_log(basename(__FILE__) . ':' . __LINE__ . " jm@bellcom.dk: Job complete. Fetching file");
	watchdog('adlib_api', 'A PDF has been generated successfully for file: %file ', array('%file' => $jobfileinfo['out_filename']));
	$file_url = $jobfileinfo['out_url'];
	error_log(basename(__FILE__) . ':' . __LINE__ . ' Var: $file_url = ' . print_r($file_url, 1));
        $download = curl_init($file_url);
        if (variable_get('os2web_pws_proxy')) {
          curl_setopt($download, CURLOPT_PROXY, variable_get('os2web_pws_proxy_host'));
          curl_setopt($download, CURLOPT_PROXYPORT, variable_get('os2web_pws_proxy_port'));
          curl_setopt($download, CURLOPT_HTTPPROXYTUNNEL, TRUE);
        }
        curl_setopt($download, CURLOPT_RETURNTRANSFER, TRUE);
        $data = curl_exec($download);

        $info = curl_getinfo($download);
        if ($info['http_code'] === 200 && $info['size_download'] > 4) {
          switch ($file->jobtype) {
            case 0: // PDF
              $upd_file = file_load($file->fid);
              $uri = file_unmanaged_save_data($data, dirname($upd_file->uri) . '/' . $jobfileinfo['out_filename'], FILE_EXISTS_REPLACE);
              if (filesize(drupal_realpath($uri)) > 0) {
		//getting the initial file information
                $old_file_mime = $upd_file->filemime;
                $old_file_uri = $upd_file->uri;
                
                //if excel create the new file, keep the old one
                if (os2dagsorden_adlib_api_is_excel($old_file_mime)){
		    $upd_file = new stdClass();
		    $upd_file->uid = 1;
		    $upd_file->status = FILE_STATUS_PERMANENT;
                } else {//delete the old file and replace it with new one
		    db_delete('file_managed')->condition('uri', $uri)->execute();
		    //deleting old file
		    file_unmanaged_delete($old_file_uri);
                }
                $upd_file->uri = $uri;
                $upd_file->filename = basename($uri);
                $upd_file->display = 1;
                $upd_file->filemime = file_get_mimetype($upd_file->uri);
                $upd_file->filesize = filesize(drupal_realpath($upd_file->uri));
                $upd_file->timestamp = time();
		os2dagsorden_adlib_api_destroy_job($file->job_id);
                drupal_write_record('os2web_adlib_api_doc_files', $record, array('fid', 'jobtype'));
                $upd_file = file_save($upd_file);
                
                $destination_node = node_load($file->did);
                
                if (strcmp($destination_node->type, 'bullet_point_attachment') == 0){//update bullet point attachment
		    os2dagsorden_pdf2htmlex_schedule($upd_file->fid, $file->did);
		    
		    //resave file only if not excel
		    if (!os2dagsorden_adlib_api_is_excel($old_file_mime)){
		      $destination_node->field_bpa_file[$node->language][0] = (array) $upd_file;
		    }
		 } else if (strcmp($destination_node->type, 'meeting') == 0){//meeting
		    //resave file
		    if ($upd_file->fid == $destination_node->field_meeting_description_closed[$destination_node->language][0]['fid'])//update closed file
		      $destination_node->field_meeting_description_closed[$destination_node->language][0] = (array) $upd_file;
		    else if ($upd_file->fid == $destination_node->field_meeting_description[$destination_node->language][0]['fid'])//update opened file
		      $destination_node->field_meeting_description[$destination_node->language][0] = (array) $upd_file;
		    else {//go through addtional agendas to replace the right file
		      $imported = FALSE;
		      if (isset($destination_node->field_meeting_description_add_c)){//closed agenda
			foreach($destination_node->field_meeting_description_add_c as $index => $description_field){    
			  if ($upd_file->fid == $description_field['fid']){//same file id, replace the description
			      $destination_node->field_meeting_description_add_c[$destination_node->language][$index] = (array) $upd_file;
			      $imported = TRUE;
			      break;
			  }
			}
		      }
		      if (!$imported){
			if (isset($destination_node->field_meeting_description_add)){//opened agenda
			  foreach($destination_node->field_meeting_description_add as $index => $description_field){    
			    if ($upd_file->fid == $description_field['fid']){//same file id, replace the description
				$destination_node->field_meeting_description_add[$destination_node->language][$index] = (array) $upd_file;
				$imported = TRUE;
				break;
			    }
			  }
			}
		      }
		    }
		 }
		  if (os2dagsorden_access_helper_meeting_fully_converted($destination_node)){//save with status+
		      if (strcmp($destination_node->field_meeting_status['und'][0]['value'], 'Dagsorden') == 0)
			os2dagsorden_access_helper_set_meeting_status_and_save($destination_node, 'Dagsorden+');
		      else
			os2dagsorden_access_helper_set_meeting_status_and_save($destination_node, 'Referat+');
		  } else {//save with the same status
		    os2dagsorden_access_helper_set_meeting_status_and_save($destination_node, $destination_node->field_meeting_status['und'][0]['value']);
		  }
	
              } else {
                error_log(basename(__FILE__) . ':' . __LINE__ . " jm@bellcom.dk: Filesize was 0. Aborting update.");
              }
              break;
            case 1: // HTML
              $nid = $file->did;
              if ($node = node_load($nid)) {
		$data = _os2dagsorden_adlib_api_process_html($data, $jobfileinfo['out_url']);
		//$data = _os2dagsorden_adlib_api_improve_html($data);

		$node->field_bpa_body[LANGUAGE_NONE][0]['value'] = $data;
                $node->field_bpa_body[LANGUAGE_NONE][0]['format'] = 'full_html';

                $node->feeds = array();
                node_save($node);
                os2dagsorden_adlib_api_destroy_job($file->job_id);
                drupal_write_record('os2web_adlib_api_doc_files', $record, array('fid', 'jobtype'));
                error_log('MARK - ' . basename(__FILE__) . ':' . __LINE__ . ' in ' . __FUNCTION__ . '() - File converted, node updated.');
                
                _os2dagsorden_adlib_api_set_meeting_status_published_plus($node);
              }
              break;
            default:
              error_log('MARK - ' . basename(__FILE__) . ':' . __LINE__ . ' in ' . __FUNCTION__ . '() - Unknown jobtype');
          }
        } elseif ($info['http_code'] === 404) { // File not found ??
          $record = array(
              'fid' => $file->fid,
              'jobtype' => $file->jobtype,
              'job_id' => null,
              'job_info' => null,
              );
          drupal_write_record('os2web_adlib_api_doc_files', $record, array('fid', 'jobtype'));
          watchdog('adlib_api', 'Completed file (fid: %fid)could not be found on the server. Job reset.', array('%fid' => $file->fid), WATCHDOG_WARNING);
        }
      }
    }
  }

// Start new job if needed
  $files = db_select('os2web_adlib_api_doc_files', 'f')->fields('f')->isNull('job_id');
  if (ADLIB_TEST_FID) {
    $files = $files->condition('fid', ADLIB_TEST_FID);
  }
  if ($limit !== FALSE) {
    $files->range(0, $limit);
  }
  $files = $files->execute();

  while ($file = $files->fetchObject()) {
    _os2dagsorden_adlib_api_queue_file($file);
  }
}

/**
 * This function validates html and fixes all image links
 *
 * @param type   $data     html data
 * @param string $base_url base url
 *
 * @return processed version of input
 */
function _os2dagsorden_adlib_api_process_html($data, $base_url) {
  $base_dir = ADLIB_HTML_IMG_FOLDER;
  if (!file_prepare_directory($base_dir, FILE_CREATE_DIRECTORY | FILE_MODIFY_PERMISSIONS)) {
    watchdog('adlib_api', 'Cannot get write permission for the AdLib image store folder.', null, WATCHDOG_ERROR);
    return;
  }
  module_load_include('php', 'os2dagsorden_adlib_api', 'includes/simple_html_dom');
  $html = str_get_html($data);
  $img = $html->find('img');
  for ($i = 0; $i < count($img); $i++) {
    watchdog('adlib_api', 'Importing image for HTML: %fname', array('%fname' => basename($img[$i]->src)));
    $image_url = $base_url . '/' . rawurlencode($img[$i]->src);
    $download = curl_init($image_url);
    if (variable_get('os2web_pws_proxy')) {
      curl_setopt($download, CURLOPT_PROXY, variable_get('os2web_pws_proxy_host'));
      curl_setopt($download, CURLOPT_PROXYPORT, variable_get('os2web_pws_proxy_port'));
      curl_setopt($download, CURLOPT_HTTPPROXYTUNNEL, TRUE);
    }
    curl_setopt($download, CURLOPT_RETURNTRANSFER, TRUE);
    $image = curl_exec($download);

    $info = curl_getinfo($download);
    if ($info['http_code'] === 200) {
      $file_uri = $base_dir . basename(str_replace('\\', '/', $img[$i]->src)); // AdLib uses Windows folder notation
      $file = file_save_data($image, $file_uri, FILE_EXISTS_REPLACE);
      $img[$i]->src = file_create_url($file->uri);
    } else {
      watchdog('adlib_api', 'Failed to fetch image for HTML: %fname', array('%fname' => basename($element->src)), WATCHDOG_WARNING);
    }
  }
  $data = (string) $html;

  // Clean up the html, since AdLib sometimes return less-than-valid html and hence can cause PDO exceptions
  if (!function_exists('tidy_repair_string')) {
    watchdog('adlib_api', 'Tidy API not found! Cannot process HTML.', null, WATCHDOG_ERROR);
  } else {
    $config = array(
//        'clean' => true,
        'indent' => true,
        'output-xhtml' => true,
        'wrap' => 200,
        'word-2000' => true,
        'show-body-only' => true,
    );
    $data = tidy_repair_string($data, $config);
  }

  return $data;
}

/**
 * Worker function that queues up a single file from a row in the job table
 * 
 * @param object $file Object representing a row from the job table
 * @return boolean true on success
 */
function _os2dagsorden_adlib_api_queue_file($file) {
  $adlib = _os2dagsorden_adlib_api_get_instance();
  $file->file = file_load($file->fid);

  if (is_file(drupal_realpath($file->file->uri))) {
    $upload = $adlib->uploadData($file->file->filename, file_get_contents(drupal_realpath($file->file->uri)));
    if ($upload) {
      $job = $adlib->addJob($upload, $file->jobtype);
      if ($job !== FALSE) {
        $jobinfo = array(
            'fid' => $file->fid,
            'jobtype' => $file->jobtype,
            'job_id' => (string) $job->JobSettings['JobID'],
            'job_info' => $upload,
        );
        drupal_write_record('os2web_adlib_api_doc_files', $jobinfo, array('fid', 'jobtype'));
        watchdog('adlib_api', 'Queued file %file for PDF.', array('%file' => $file->file->filename));
        return true;
      } else {
        watchdog('adlib_api', 'Upload of %file failed. Check permissions.', array('%file' => $file->file->filename));
        db_delete('os2web_adlib_api_doc_files')->condition('fid', $file->file->fid)->execute();
      }
    }
  }
  return false;
}

/**
 * Cleanup job
 * 
 * @access protected
 *
 * @return none
 */
function _os2dagsorden_adlib_api_cleanup_files() {
  $dir = preg_replace('/\/$/', '', DEFAULT_DOC_CACHE_PATH); // Remove trailing /
  $filelist = file_scan_directory($dir, '/.*/');
  foreach ($filelist as $uri => $file) {
    $file = db_select('file_managed', 'f')->fields('f')->condition('uri', $uri)->execute()->fetchAll();
    if (count($file) === 0) {
      // File is not linked in the drupal database
//        file_unmanaged_delete($uri);
//        error_log(basename(__FILE__) . ':' . __LINE__ . ' Deleted: ' . print_r($uri, 1));
    }
  }
}

/**
 * Checks if the file is in PDF
 * 
 * @param mixed $fid 
 * @access protected
 *
 * @return none
 */
function _os2dagsorden_adlib_api_is_file_pdf($fid) {
  if (is_array($fid)) {
    $result = array();
    $files = file_load_multiple($fid);
    foreach ($files as $file) {
      $result[$file->fid]['is_pdf'] = strcasecmp(pathinfo($file->filename, PATHINFO_EXTENSION), 'pdf') === 0;
      $result[$file->fid]['file'] = $file;
    }
    return $result;
  } else {
    return strcasecmp(pathinfo(file_load($fid)->filename, PATHINFO_EXTENSION), 'pdf') === 0;
  }
}

/**
 * Deletes the file entry from adlib conversion table
 * 
 * @param file $file the file
 *
 * @return none
 */
function os2dagsorden_adlib_api_file_delete($file) {
   if (is_numeric($file)) {
    $file = db_select('os2web_adlib_api_doc_files', 'f')
        ->fields('f')
        ->condition('fid', $file)
        ->execute()
        ->fetchObject();
  }
  os2dagsorden_adlib_api_destroy_job($file->job_id);
  db_delete('os2web_adlib_api_doc_files')->condition('fid', $file->fid)->execute();
  watchdog('adlib_api', 'File %file has been cleaned up from adlib conversion table.', array('%file' => $file->uri), WATCHDOG_DEBUG);
}

/**
 * Destroys the job on adlib server, also deletes the job folder
 * 
 * @param file $file the file
 *
 * @return none
 */
function os2dagsorden_adlib_api_destroy_job($job_id) {
  $file = db_select('os2web_adlib_api_doc_files', 'f')
      ->fields('f')
      ->condition('job_id', $job_id)
      ->execute()
      ->fetchObject();
  if (is_object($file)) {
    $adlib = _os2dagsorden_adlib_api_get_instance();
    if (isset($file->job_id) && $file->job_id != 'Complete') {
      $jobfileinfo = unserialize($file->job_info);
      $adlib->deleteJob($file->job_id);
      $folder = explode('\\', $jobfileinfo['basefolder']);
      $adlib->deleteJobFolder($folder[1]);
    }
    watchdog('adlib_api', 'Deleted job for %fid', array('%fid' => $job_id));
  }
}

/**
 * Function to determines if mime is excel file
 *
 * @param string $mime the mime of the file
 *
 * @return TRUE or FALSE
 */
function os2dagsorden_adlib_api_is_excel($mime){
  if ($mime == "application/vnd.openxmlformats-officedocument.spreadsheetml.sheet" || $mime == "application/vnd.ms-excel")
    return TRUE;
  else 
    return FALSE;
}