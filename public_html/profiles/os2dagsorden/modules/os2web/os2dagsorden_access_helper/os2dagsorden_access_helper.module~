<?php
/**
* os2dagsorden_access_helper
*
* PHP version 5
*
* @category OS2Dagsorden
* @package  OS2Dagsorden_Access_Helper
* @author   Stanislav Kutasevits <stan@bellcom.dk>
* @license  http://www.gnu.org/licenses/gpl-2.0.html GNU General Public License, version 2
* @link     http://bellcom.dk
*/

/**
 * Implementation of hook_menu
 *
 * @return list of links
 */
function os2dagsorden_access_helper_menu() {
    $items = array();
    
    $items['bullet-point/%/speaker-paper/%/print'] = array(
        'title' => 'Print Talepapir',
        'type' => MENU_CALLBACK,
        'page arguments' => array(1,3),
	'page callback' => 'os2dagsorden_access_helper_print_speaker_paper',
	'access arguments' => array(3),
	'access callback' => 'os2dagsorden_access_helper_check_user_can_see_speaker_paper',
	'type' => MENU_CALLBACK,
    );
    
    $items['meeting/%/speaker-papers/print'] = array(
        'title' => 'Print Talepapirer',
        'type' => MENU_CALLBACK,
        'page callback' => 'os2dagsorden_access_helper_print_meeting_speaker_papers',
        'access arguments' => array('access content'),
        'page arguments' => array(1)
    );
    
    $items['logout'] = array(
        'type' => MENU_CALLBACK,
        'page callback' => 'os2dagsorden_access_helper_logout',
        'access callback' => TRUE,
    );
    
    return $items;
}

/**
 * Returns the nice print version of the speaker paper
 *
 * @param int $bullet_point_id  ID of the bullet point
 * @param int $speaker_paper_id ID of the speaker paper
 *
 * @return html for nice printing of speaker paper
 */
function os2dagsorden_access_helper_print_speaker_paper($bullet_point_id, $speaker_paper_id) {
    if (os2dagsorden_access_helper_bullet_point_has_speaker_paper($bullet_point_id)) {
	$bullet_point = node_load($bullet_point_id);
	$speaker_paper = node_load($speaker_paper_id);
        drupal_set_title(t('Talepapir') . ' - ' . $speaker_paper->title);
        $html .= '<h3>' . $bullet_point->title . ' - Talepapir - ' . $speaker_paper->title . '</h3>';

	$html .= $speaker_paper->body['und'][0]['value'];
    }

    return ('<div class="node">' . $html . '</div>');    
}

/**
  * Composes the print page for meeting's speaker papers for a current user
  *
  * @param int $meeting_id id of a meeting
  *
  * return list of the speaker papers attached to that meeting
  */
function os2dagsorden_access_helper_print_meeting_speaker_papers($meeting_id){
    global $user;
    $speaker_papers_print = "";    
    $meeting = node_load($meeting_id);
    $bullet_point_unique = array();
    if (isset($meeting->field_ref_bullet_points['und'])) {
	foreach ($meeting->field_ref_bullet_points['und'] as $bullet_point) {
	  $bullet_point_unique[] = $bullet_point['target_id'];
	}
	$bullet_point_unique = array_unique($bullet_point_unique);
	foreach($bullet_point_unique as $bullet_point){
            $query = new EntityFieldQuery();
	    $query->entityCondition('entity_type', 'node')
		->propertyCondition('type', array('speaker_paper'))
		->propertyCondition('uid', $user->uid)
		->fieldCondition('field_ref_bullet_point', 'target_id', $bullet_point, '=');

	    $result = $query->execute();
	    if (isset($result['node'])){
	      $nids = array_keys($result['node']);
	      $speaker_papers_print .= os2dagsorden_access_helper_print_speaker_paper($bullet_point, $nids[0]);
	    }
        }
    }
    drupal_set_title(t('Talepapirer') . ' - ' . $meeting->title);
    return $speaker_papers_print;
}

/**
 * Checks if given meeting has speaker paper of the current user attached.
 *
 * @param int $meeting_id ID of the meeting
 *
 * @return true of false
 */
function os2dagsorden_access_helper_meeting_has_speaker_paper($meeting_id) {
    $meeting = node_load($meeting_id);
    if (isset($meeting->field_ref_bullet_points['und'])) {
        foreach ($meeting->field_ref_bullet_points['und'] as $bullet_point) {
            if (os2dagsorden_access_helper_bullet_point_has_speaker_paper($bullet_point['target_id']))
                return TRUE;
        }
    }

    return FALSE;
}

/**
 * Hook to file download. Allows or denies the file download based on user permissions.
 *
 * @param int $meeting_id ID of the meeting.
 *
 * @return -1 in case or refusal and file headers in case of success.
 */
function os2dagsorden_access_helper_file_download ($uri){
  $path = explode('/', $uri);
  $filename = $path[3];
  $result = db_query("SELECT f.* FROM {file_managed} f WHERE filename = :filename", array('filename' => $filename));
  foreach ($result as $file) {
    //find meeting by file->fid
    
    //closed agenda?
    $query = new EntityFieldQuery();
    $query->entityCondition('entity_type', 'node')
        ->fieldCondition('field_meeting_description_closed', 'fid', $file->fid, '=');
    
    $result = $query->execute();
    if (!isset($result['node'])){
      //closed additional agenda?
      $query = new EntityFieldQuery();
      $query->entityCondition('entity_type', 'node')
        ->fieldCondition('field_meeting_description_add_c', 'fid', $file->fid, '=');
        
      $result = $query->execute();
    }
    if (isset($result['node'])) {
      $nids = array_keys($result['node']);
      $meeting_id = reset($nids);
    } 
    
    if ($meeting_id) {//if meeting is found - meaning that the file is closed agenda or closed additional agenda. Perform deep check
        if (os2dagsorden_access_helper_check_user_can_see_closed_agenda($meeting_id)){
	  return array(
	    'Content-Type' => $file->filemime,
	    'Content-Length' => $file->filesize,
	    'Content-Disposition' => 'attachment; filename=' . $file->filename
	  );
	} else 
	  return -1;
    } else {//else check if user can view meeting information at all
      
      //find meeting by file->fid
      //opened agenda?
      $query = new EntityFieldQuery();
      $query->entityCondition('entity_type', 'node')
        ->fieldCondition('field_meeting_description', 'fid', $file->fid, '=');
        
      $result = $query->execute();
      if (!isset($result['node'])){
	//opened additional agenda?
	$query = new EntityFieldQuery();
	$query->entityCondition('entity_type', 'node')
	  ->fieldCondition('field_meeting_description_add', 'fid', $file->fid, '=');
	  
	$result = $query->execute();
      }
      if (isset($result['node'])) {
	$nids = array_keys($result['node']);
	$meeting_id = reset($nids);
      } 
    
      if (os2dagsorden_access_helper_check_user_can_see_meeting_agenda($meeting_id)){
	return array(
	  'Content-Type' => $file->filemime,
	  'Content-Length' => $file->filesize,
	  'Content-Disposition' => 'attachment; filename=' . $file->filename
	);
      } else 
	return -1;
    }
  }
}

/**
 * Checks if a user can see the closed agenda of a given meeting.
 *
 * @param int $meeting_id ID of the meeting
 *
 * @return true of false
 */
function os2dagsorden_access_helper_check_user_can_see_closed_agenda($meeting_id){
    $user_ent = os2dagsorden_access_helper_get_user();
    if (!$user_ent->uid){
	return FALSE;
    }

    $meetings = entity_load('node', array($meeting_id), array('type' => 'meeting'));
    $meeting_committee_id = $meetings[$meeting_id]->field_committee['und'][0]['tid'];

    if (!empty($user_ent->field_user_committee)) {  //is part of the committee
	foreach ($user_ent->field_user_committee['und'] as $user_committee_id) {
	    if (intval($meeting_committee_id) == $user_committee_id['tid']) {
		return TRUE;
	    }
	}
    }

    if (!empty($user_ent->field_follows_committee_plus)) {  //follows committee PLUS
	foreach ($user_ent->field_follows_committee_plus['und'] as $user_committee_id) {
	    if (intval($meeting_committee_id) == $user_committee_id['tid']) {
		return TRUE;
	    }
	}
    }
    
    //none of the above, access denied
    return FALSE;
}

/**
 * Checks if given bullet point has speaker paper of the current user attached.
 *
 * @param int $bullet_point_id ID of the bullet point
 *
 * @return true of false
 */
function os2dagsorden_access_helper_bullet_point_has_speaker_paper($bullet_point_id) {
    global $user;
    $query = new EntityFieldQuery();
    $query->entityCondition('entity_type', 'node')
        ->propertyCondition('type', array('speaker_paper'))
        ->propertyCondition('uid', $user->uid)
        ->fieldCondition('field_ref_bullet_point', 'target_id', $bullet_point_id, '=');

    $result = $query->execute();

    return isset($result['node']);
}

/**
 * Checks is given speaker paper can be seen by user.
 *
 * @param int $sp_id the ID of speaker paper
 *
 * @return true of false
 */
function os2dagsorden_access_helper_check_user_can_see_speaker_paper($sp_id){
    global $user;
    $sp = node_load($sp_id);
    
    return ($user->uid == $sp->uid);
}

/**
 * Checks is given meeting can bee seen by the user.
 *
 * @param int $meeting_id the ID of the meeting
 *
 * @return true of false
 */
function os2dagsorden_access_helper_check_user_can_see_meeting_agenda($meeting_id) {
  $user_ent = os2dagsorden_access_helper_get_user();

  if (!$user_ent->uid)
      return FALSE;
	  
  $meeting = node_load($meeting_id);
  $meeting_committee_id = $meeting->field_committee['und'][0]['tid'];
  $committee = taxonomy_term_load($meeting_committee_id);
  
  $hidden_agendas = explode(',', variable_get('os2dagsorden_hidden_agenda_committee'));
  $in_hidden_list = FALSE;
  
  if (strpos(strtolower($meeting->field_meeting_status['und'][0]['value']), "dagsorden") !== FALSE){
    if (isset($committee->field_committee_acadre_id['und'])) {
	foreach ($committee->field_committee_acadre_id['und'] as $id_raw) {
	    if (in_array(intval($id_raw['value']), $hidden_agendas)) {
		$in_hidden_list = TRUE;
		break;
	    }
	}
    }
      
    if ($in_hidden_list) {
	if (!empty($user_ent->field_user_committee)) {  //is part of the committee
		foreach ($user_ent->field_user_committee['und'] as $user_committee_id) {
		    if (intval($meeting_committee_id) == $user_committee_id['tid']) {
			return TRUE;
		    }
		}
	}

	if (!empty($user_ent->field_follows_committee_plus)) {  //follows committee PLUS
	    foreach ($user_ent->field_follows_committee_plus['und'] as $user_committee_id) {
		if (intval($meeting_committee_id) == $user_committee_id['tid']) {
		    return TRUE;
		}
	    }
	}
	//none of the above, access denied
	return FALSE;
    }
  }

  return TRUE;
}

/**
 * Checks if current user is allowed the access the bullet point.
 *
 * @param int $meeting_id      ID of the meeting
 * @param int $bullet_point_id ID of the bullet point
 *
 * @return true of false
 */
function os2dagsorden_access_helper_check_user_can_see_bullet_point($meeting_id, $bullet_point_id) {
    $user_ent = os2dagsorden_access_helper_get_user();
     
    if (!$user_ent->uid)
        return FALSE;
    
    if (!os2dagsorden_access_helper_check_user_can_see_meeting_agenda($meeting_id))
	return FALSE;
    
    if (os2dagsorden_access_helper_check_bullet_point_is_part_of_meeting($meeting_id, $bullet_point_id)) {
        $bullet_points = entity_load('node', array($bullet_point_id), array('type' => 'bullet_point'));
        $is_closed = $bullet_points[$bullet_point_id]->field_bul_point_closed['und'][0]['value'];
        $is_personal = $bullet_points[$bullet_point_id]->field_bul_point_personal['und'][0]['value'];

        if (intval($is_closed) == 0 && intval($is_personal) == 0) { //is opened and not personal
            return TRUE;
        }
        else { //is closed or personal
            $meetings = entity_load('node', array($meeting_id), array('type' => 'meeting'));
            $meeting_committee_id = $meetings[$meeting_id]->field_committee['und'][0]['tid'];

            if (!empty($user_ent->field_user_committee)) {  //is part of the committee
                foreach ($user_ent->field_user_committee['und'] as $user_committee_id) {
                    if (intval($meeting_committee_id) == $user_committee_id['tid']) {
                        return TRUE;
                    }
                }
            }

            if (!empty($user_ent->field_follows_committee_plus)) {  //follows committee PLUS
                foreach ($user_ent->field_follows_committee_plus['und'] as $user_committee_id) {
                    if (intval($meeting_committee_id) == $user_committee_id['tid']) {
                        return TRUE;
                    }
                }
            }
            //none of the above, access denied
            return FALSE;
        }
    } 
    else
        return FALSE;
}

/**
 * Checks if current user is allowed the access the bullet point attachment.
 *
 * @param int $meeting_id                 ID of the meeting
 * @param int $bullet_point_id            ID of the bullet point
 * @param int $bullet_point_attachment_id ID of the attachment
 *
 * @return true of false
 */
function os2dagsorden_access_helper_check_user_can_see_bullet_point_attachment($meeting_id, $bullet_point_id, $bullet_point_attachment_id) {
    if (os2dagsorden_access_helper_check_attachment_is_part_of_bullet_point($bullet_point_id, $bullet_point_attachment_id)){
      $bpa = node_load($bullet_point_attachment_id);
      if ($bpa->field_bpa_closed['und'][0]['value'] == 1){
	$user = os2dagsorden_access_helper_get_user();
	
	$meeting = node_load($meeting_id);
	$meeting_committee_id = $meeting->field_committee['und'][0]['tid'];
	
	if (!empty($user->field_user_committee)) {  //is part of the committee
	    foreach ($user->field_user_committee['und'] as $user_committee_id) {
		if (intval($meeting_committee_id) == $user_committee_id['tid'])
		    return TRUE;
	    }
	}

	if (!empty($user->field_follows_committee_plus)) {  //follows committee PLUS
	    foreach ($user->field_follows_committee_plus['und'] as $user_committee_id) {
		if (intval($meeting_committee_id) == $user_committee_id['tid']) {
		    return TRUE;
		}
	    }
	}
      } else 
	return os2dagsorden_access_helper_check_user_can_see_bullet_point($meeting_id, $bullet_point_id);
    }
    else
        return FALSE;
}

/**
 * Checks if the bullet point is actually part of the meeting
 *
 * @param int $meeting_id      ID of the meeting
 * @param int $bullet_point_id ID of the bullet point
 *
 * @return true of false
 */
function os2dagsorden_access_helper_check_bullet_point_is_part_of_meeting($meeting_id, $bullet_point_id) {
    $meeting = node_load($meeting_id);

    $contains = FALSE;
    if (!empty($meeting->field_ref_bullet_points['und'])) {
        foreach ($meeting->field_ref_bullet_points['und'] as $ref_bullet_point) {
            if (intval($bullet_point_id) == intval($ref_bullet_point['target_id'])) {
                $contains = TRUE;
                break;
            }
        }
    }
    return $contains;
}

/**
 * Returns a meeting associated with this bullet point
 *
 * @param int $bullet_point_id ID of the bullet point
 *
 * @return meeting
 */
function os2dagsorden_access_helper_get_meeting_by_bullet_point($bullet_point_id){
    $bullet_point = node_load($bullet_point_id);
}

/**
 * Checks if the bullet point attachment is actually part of the bullet point.
 *
 * @param int $bullet_point_id ID of the bullet point
 * @param int $bilag_id        ID of the bullet point attachment
 *
 * @return true of false
 */
function os2dagsorden_access_helper_check_attachment_is_part_of_bullet_point($bullet_point_id, $bilag_id) {    
    $bullet_point = node_load($bullet_point_id);

    $contains = FALSE;
    if (!empty($bullet_point->field_ref_attachment['und'])) {
        foreach ($bullet_point->field_ref_attachment['und'] as $ref_bullet_point_attachment) {
            if (intval($bilag_id) == intval($ref_bullet_point_attachment['target_id'])) {
                $contains = TRUE;
                break;
            }
        }
    }
    return $contains;
}

/**
 * Fetches the current user IP address.
 *
 * @return IP address
 */
function os2dagsorden_access_helper_get_client_ip() {
    $ipaddress = '';
    if (getenv('HTTP_CLIENT_IP'))
        $ipaddress = getenv('HTTP_CLIENT_IP');
    elseif (getenv('HTTP_X_FORWARDED_FOR'))
        $ipaddress = getenv('HTTP_X_FORWARDED_FOR');
    elseif (getenv('HTTP_X_FORWARDED'))
        $ipaddress = getenv('HTTP_X_FORWARDED');
    elseif (getenv('HTTP_FORWARDED_FOR'))
        $ipaddress = getenv('HTTP_FORWARDED_FOR');
    elseif (getenv('HTTP_FORWARDED'))
        $ipaddress = getenv('HTTP_FORWARDED');
    elseif (getenv('REMOTE_ADDR'))
        $ipaddress = getenv('REMOTE_ADDR');
    else
        $ipaddress = "UNKNOWN";

    return $ipaddress;
}

/**
 * Function to make ser logout and set the information message about it.
 *
 * Important! Not a hook.
 * @return none
 */
function os2dagsorden_access_helper_logout() {
  // Destroy the current session, and reset $user to the anonymous user.
  $show_message = TRUE;
  if (strcasecmp($_SESSION['messages']['status'][0], 'You have been logged out due to inactivity.') == 0)
    $show_message = FALSE;
  if (drupal_session_started()){
    session_destroy();
  }
  
  unset($_GET['destination']);
  if ($show_message)
    drupal_set_message("Du har nu logget af OS2dagsorden. Vi anbefaler, at du lukker alle browservinduer.");  
  drupal_goto();
}

/**
 * Implements the hook_cron
 *
 * @return none
 */
function os2dagsorden_access_helper_cron() {
    os2dagsorden_access_helper_delete_user_rights();
}

/**
 * Deletes all the user rights (is member of) if the right has expired.
 * The function will delete the connection to the member object, as well as the role object itself.
 *
 * @return none
 */
function os2dagsorden_access_helper_delete_user_rights() {
    $users = db_select('users', 'u')
            ->fields('u', array('uid'))
            ->execute()
            ->fetchAll();

    foreach ($users as $user) {
        $full_user = user_load($user->uid);
        if (isset($full_user->field_user_positions['und'])) {
            foreach ($full_user->field_user_positions['und'] as $pos_index => $pos) {
                $pos_full = taxonomy_term_load($pos['tid']);
                if (isset($pos_full->field_user_pos_valid['und'])) {
                    $valid_until = strtotime($pos_full->field_user_pos_valid['und']['0']['value2']);
                    if (strtotime('now') > $valid_until) {
                        //deleting user connection to that committee (member of)
                        if (isset($full_user->field_user_committee['und'])) {
                            foreach ($full_user->field_user_committee['und'] as $com_index => $com) {
                                if ($com['tid'] == $pos_full->field_user_pos_committee['und']['0']['tid'])
                                    unset($full_user->field_user_committee['und'][$com_index]);
                            }
                        }

                        //deleting user connection to role
                        unset($full_user->field_user_positions['und'][$pos_index]);

                        user_save($full_user); //save changes
                        //deleting the role itself
                        taxonomy_term_delete($pos['tid']);
                    }
                }
            }
        }
    }
}

/**
  * Checks if all of the meeitng bullet point bilag were converted to pdf/html and all the meetings descriptions have been converted to pdf
  *
  * @return TRUE or FALSE
  */
function os2dagsorden_access_helper_meeting_fully_converted($meeting){
  //going through all the meetings bullet points
  if (!empty($meeting->field_ref_bullet_points['und'])) {
      foreach ($meeting->field_ref_bullet_points['und'] as $ref_bullet_point) {
	  $bullet_point = node_load($ref_bullet_point['target_id']);
	  
	  //going through all the bullet points attachments
	  if (!empty($bullet_point->field_ref_attachment['und'])) {
	      foreach ($bullet_point->field_ref_attachment['und'] as $ref_bullet_point_attachment) {
		  $attachment = node_load($ref_bullet_point_attachment['target_id']);
		  if (empty($attachment->field_bpa_body['und'][0]['value']) && empty($attachment->field_bpa_file_html['und'][0]))
		    return FALSE;
	      }
	  }
      }
  }
  
  //going through all the descriptions
  if (isset($meeting->field_meeting_description_closed[$meeting->language])){//closed agenda
    $file_name = $meeting->field_meeting_description_closed[$meeting->language][0]['filename'];
    $file_name = explode('.', $file_name);
    $extention = strtoupper($file_name[1]);
    if (stripos($extention, 'pdf') !== 0)
      return FALSE;
  } 
  if (isset($meeting->field_meeting_description[$meeting->language])){//opened agenda
    $file_name = $meeting->field_meeting_description[$meeting->language][0]['filename'];
    $file_name = explode('.', $file_name);
    $extention = strtoupper($file_name[1]);
    if (stripos($extention, 'pdf') !== 0)
      return FALSE;
  }
  if (isset($meeting->field_meeting_description_add_c[$meeting->language])){//additional closed agenda
    foreach($meeting->field_meeting_description_add_c[$meeting->language] as $description_field){
      $file_name = $description_field['filename'];
      $file_name = explode('.', $file_name);
      $extention = strtoupper($file_name[1]);
      if (stripos($extention, 'pdf') !== 0)
	return FALSE;
    }
  }
  if (isset($meeting->field_meeting_description_add[$meeting->language])){//additional opened agenda
    foreach($meeting->field_meeting_description_add[$meeting->language] as $description_field){
      $file_name = $description_field['filename'];
      $file_name = explode('.', $file_name);
      $extention = strtoupper($file_name[1]);
      if (stripos($extention, 'pdf') !== 0)
	return FALSE;
    }
  }
  
  return TRUE;
}

/**
 * Determines if user's agent device is touch device (iPad or Android).
 * 
 * @return true or false
 */
function os2dagsorden_access_helper_is_touch(){
  $isiPad = (bool) strpos($_SERVER['HTTP_USER_AGENT'],'iPad');
  $isAndroid = (bool) strpos($_SERVER['HTTP_USER_AGENT'],'Android');
  $isTouch = ($isiPad or $isAndroid);
  return $isiPad;
}


/**
 * Changes the status of a meeting and saves the node
 * The function will delete the connection to the member object, as well as the role object itself.
 *
 * @param $node   mixed  meeting node to be saved
 * @param $status string new status of meeting
 *
 * @return $node meeting
 */
function os2dagsorden_access_helper_set_meeting_status_and_save($node, $status) {
  if (strcasecmp($status, 'Dagsorden') == 0 || strcasecmp($status, 'Referat') == 0){
    $node->field_meeting_status['und'][0]['value'] = $status;
    
    // Save the meeting node.
    node_submit($node);
    node_save($node);
    
    $committee_id = $node->field_committee['und'][0]['tid'];
    $committee = taxonomy_term_load($committee_id);
    
    $notification_committees = explode(',',variable_get('os2dagsorden_send_notification_committee'));
    $send_notification = FALSE;
    
    if (isset($committee->field_committee_acadre_id['und'])) {
	foreach ($committee->field_committee_acadre_id['und'] as $id_raw) {
	    if (in_array(intval($id_raw['value']), $notification_committees)) {
		$send_notification = TRUE;
		break;
	    }
	}
    }
     
    if ($send_notification){
      //send the email to involved people
      //medlem
      $query = new EntityFieldQuery();
      $query->entityCondition('entity_type', 'user')
	  ->fieldCondition('field_user_committee', 'tid', $committee_id, '=');    
      $result = $query->execute();
      
      $uids = array();
      
      if (isset($result['user'])) {
	  $uids = array_keys($result['user']);
      }
	
      //follow+  
      $query = new EntityFieldQuery();
      $query->entityCondition('entity_type', 'user')
	  ->fieldCondition('field_follows_committee_plus', 'tid', $committee_id, '='); 
      $result = $query->execute();
      if (isset($result['user'])) {
	  $uids = array_merge($uids, array_keys($result['user']));
      }
      
      $cName = taxonomy_term_load($committee_id)->name;
      $mName = check_plain($node->title);
      $mDate = check_plain($node->field_date['und'][0]['value']);
      
      $published_item = (strcasecmp($status, 'Dagsorden') == 0) ? 'en dagsorden' : 'et referat';
      
      //removing duplicates
      $uids = array_unique($uids);
      
      foreach ($uids as $uid){
	//checking is there has been a notification for the same meeting, to the same user, with the same status 
	//in the previous hour
	$query = db_select('os2dagsorden_notification_emails', 'ne');
	$query->fields('ne')
	      ->condition('uid', $uid)
	      ->condition('meeting_nid', $node->nid)
	      ->condition('status', strtolower($status))
	      ->condition('date', gmdate("Y-m-d H:i:s", strtotime("now - 1 hour")), ">=");
	$result = $query->execute();
    
	//if result is empty, then send the mail
	if (!$result->rowCount()){
	  $user = user_load($uid);
	  
	  $uName = $user->field_user_full_name['und'][0]['value'];
	  $subject = ucfirst($published_item) . ' til ' . $mName . ' er publiceret';
	  
	  $body = '<html><body>' . 
		  'Til ' . $uName . '<br/><br/>' . 
		  'Du abonnerer på ' . $cName . '<br/>' .
		  'Der er publiceret ' . $published_item . ' til ' . $mName . ' ' . $mDate .
		  '</body></html>';
	  $from = variable_get('system_mail', $my_email);
	  $message = array(
	    'to' => $user->mail,
	    'subject' => $subject,
	    'body' => $body,
	    'headers' => array(
	      'MIME-Version' => '1.0',
	      'From' => $from,
	      'Sender' => $from,
	      'Return-Path' => $from,
	      'Content-Type' => 'text/html;charset=utf-8',
	    ),
	  );
	  $system = drupal_mail_system("os2dagsorden_access_helper_set_meeting_status_and_save", "");

	  // The format function must be called before calling the mail function. 
	  //$message = $system->format($message); 
	  $system->mail($message);
	  
	  //setting the database entry about sent email
	  db_insert('os2dagsorden_notification_emails')
	    ->fields(array(
	      'uid' => $uid,
	      'meeting_nid' => $node->nid,
	      'date' => gmdate("Y-m-d H:i:s", REQUEST_TIME),
	      'status' => strtolower($status),
	    ))
	  ->execute();
	}
      }
    }
    
    return $node;
  } else { //'Aflyst', 'Ændret', 'Dagsorden+', 'Referat+'
    $node->field_meeting_status['und'][0]['value'] = $status;
    
    // Save the meeting node.
    node_submit($node);
    node_save($node);
    
    return $node;
  }
}

/**
 * Function determines whether user should or should not be shown a special Byradet link.
 * Only members or followers+ will be shown the meeting
 *
 * @return boolean TRUE or FALSE
 */
function os2dagsorden_access_helper_show_byradet_menu(){
    $user = os2dagsorden_access_helper_get_user();
    
    $term = _os2dagsorden_importer_get_committee_by_id(4);//Byradet committee only
    
    //hiding menu    
    if (!empty($user->field_user_committee)) {  //is part of the committee
	foreach ($user->field_user_committee['und'] as $user_committee_id) {
	  if (intval($term->tid) == $user_committee_id['tid'])
	      return TRUE;
	}
    }

    if (!empty($user->field_follows_committee_plus)) {  //follows committee PLUS
	foreach ($user->field_follows_committee_plus['und'] as $user_committee_id) {
	  if (intval($term->tid) == $user_committee_id['tid'])
	      return TRUE;
	}
    }
    
    return FALSE;
}

function os2dagsorden_access_helper_get_user(){
  if (!isset($GLOBALS['full_user'])){
    global $user;
    $GLOBALS['full_user'] = user_load($user->uid);
  }
  
  return $GLOBALS['full_user'];
}