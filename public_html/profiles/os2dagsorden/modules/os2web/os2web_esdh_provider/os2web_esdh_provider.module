<?php

/**
 * @file
 * Implements pluginable interface for accessing ESDH systems.
 * All plugins should be implemented in a seperate provider module
 * which implements the ctools api.
 * Look to acadre_esdh for example.
 */

/**
 * Implements hook_menu().
 */
function os2web_esdh_provider_menu() {
  $items['admin/config/os2web/esdh_provider'] = array(
    'title' => 'ESDH status',
    'access arguments' => array('administer os2web'),
    'page callback' => '_os2web_esdh_provider_status',
    'type' => MENU_LOCAL_TASK,
    'file' => 'os2web_esdh_provider.admin.inc',
  );
  $items['node/%/info'] = array(
    'page callback' => '_os2web_esdh_provider_node_tab_page',
    'page arguments' => array(1, 3),
    'access callback' => '_os2web_esdh_provider_node_tab_access',
    'access arguments' => array(1),
    'title' => 'Meeting control',
    'type' => MENU_LOCAL_TASK,
    'file' => 'os2web_esdh_provider.mmapi.inc',
  );
  $items['os2web/esdh/v1'] = array(
    'type' => MENU_CALLBACK,
    'page callback' => '_os2web_esdh_provider_handler',
    'access callback' => TRUE,
    'file' => 'os2web_esdh_provider.cpapi.inc',
  );
  
  $items['os2web/esdh/cron_test'] = array(
    'type' => MENU_CALLBACK,
    'page callback' => 'os2web_esdh_provider_cron',
    'access arguments' => array('administer os2web'),
    'access callback' => TRUE,
  );
  
  return $items;
}

/**
 * Implements hook_ctools_plugin_type().
 */
function os2web_esdh_provider_ctools_plugin_type() {
//   $plugins['cm'] = array(
//     'cache' => TRUE,
//     'required methods' => array(
//       'get_document',
//       'get_document_file',
//       'get_case_docs',
//       'get_case_data',
//       'lookup_doc',
//       'lookup_case',
//     ),
//     'optional methods' => array(
//       'available',
//     )
//   );
  $plugins['mm'] = array(
    'cache' => TRUE,
    'required methods' => array(
      'get_import_list',
      'import_meeting'
    ),
    'optional methods' => array(
      'post_import_process',
      'available',
    )
  );
//   $plugins['cp'] = array(
//     'cache' => TRUE,
//     'required methods' => array(
//       'handle_request',
//     ),
//     'optional methods' => array(
//       'available',
//     )
//   );
  return $plugins;
}

/**
 * Access callback. Show tab only on meeting pages, and if user has access.
 */
function _os2web_esdh_provider_node_tab_access($nid) {
  $node = node_load($nid);
  if ($node->type != 'meeting') {
    return FALSE;
  }
  return user_access('administer os2web');
}

/**
 * Implements hook_node_delete().
 */
function os2web_esdh_provider_node_delete($node) {
  if ($node->type === 'meeting') {
    //deleting bullet points
    $items = array_shift($node->field_ref_bullet_points);
    if (is_array($items)) {
      foreach ($items as $nids) {
        node_delete($nids['target_id']);
      }
    }
  }
  if ($node->type === 'bullet_point') {
    //deleting attachments
    $bullets = array_shift($node->field_ref_attachment);
    if (is_array($bullets)) {
      foreach ($bullets as $nids) {
        node_delete($nids['target_id']);
      }
    }
    
    //deleting speaker papers
    $query = new EntityFieldQuery();
    $query->entityCondition('entity_type', 'node')
      ->propertyCondition('type', array('speaker_paper'))
      ->fieldCondition('field_ref_bullet_point', 'target_id', $node->nid);

    $result = $query->execute();
    if (isset($result['node'])) {
      $nids = array_keys($result['node']);
      foreach ($nids as $nid) {
	  node_delete($nid);
      }
    }    
  }
  if ($node->type === 'bullet_point_attachment') {
    //deleting annotator notes
    db_delete('os2dagsorden_annotator_notes')
      ->condition('bilag_id', $node->nid)
      ->execute();
  }
}

/**
 * Implemets hook_cron().
 *
 * Will run import on every cron.
 */
function os2web_esdh_provider_cron() {
	
  if (os2web_esdh_provider_has_api('mm')) {
    $meetings = os2web_esdh_provider_invoke('mm', 'get_import_list');
    $queue = DrupalQueue::get('mm_import');
			
    //if ($queue->numberOfItems() == 0) {
      foreach ($meetings as $meeting) {
        $queue->createItem(array('meeting' => $meeting, 'force' => FALSE));
        //to remove			
			   module_load_include('inc', 'os2web_esdh_provider', 'os2web_esdh_provider.mmapi');
		     _os2web_esdh_provider_import_meeting($meeting, FALSE);
      }
      //no postprocess, uncomment to activate
//       if (os2web_esdh_provider_supports('mm', 'post_import_process')) {
//         os2web_esdh_provider_invoke('mm', 'post_import_process');
//       }
    //}
  }
}

/**
 * Implements hook_cron_queue_info().
 */
function os2web_esdh_provider_cron_queue_info() {
  $queues['mm_import'] = array(
    'worker callback' => '_os2web_esdh_provider_cron_queue_worker',
    'time' => 30,
  );
  return $queues;
}

/**
 * Worker function for a single import.
 *
 * @param array $args
 *   Meeting data for the import.
 */
function _os2web_esdh_provider_cron_queue_worker($args) {
  module_load_include('inc', 'os2web_esdh_provider', 'os2web_esdh_provider.mmapi');
  _os2web_esdh_provider_import_meeting($args['meeting'], $args['force']);
}

/**
 * Validate an API implementation for use.
 *
 * This function validates all required methods are available,
 * and that only 1 implementation exists.
 *
 * @param string $api
 *   API Id
 *
 * @return boolean
 *   True is API is implmemented and available.
 */
function os2web_esdh_provider_has_api($api) {
  $info = ctools_plugin_get_info('os2web_esdh_provider', $api);
  if ($info) {
    $plugins = ctools_get_plugins('os2web_esdh_provider', $api);
    if (count($plugins) > 1) {
      watchdog('esdh provider', 'API %api has multiple implementations active.', array('%api' => $api), WATCHDOG_ERROR);
      return FALSE;
    }
    if (isset($info['required methods'])) {
      foreach ($info['required methods'] as $method) {
        if (!os2web_esdh_provider_supports($api, $method)) {
          watchdog('esdh provider', 'Incomplete API found during check: %api', array('%api' => $api), WATCHDOG_ERROR);
          return FALSE;
        }
      }
    }
    if (os2web_esdh_provider_supports($api, 'available')) {
      if (!os2web_esdh_provider_invoke($api, 'available')) {
        return FALSE;
      }
    }
  }
  else {
    watchdog('esdh provider', 'Unimplemented API requested: %api', array('%api' => $api), WATCHDOG_ERROR);
    return FALSE;
  }
  return TRUE;
}

/**
 * Check if the api supports a given method.
 *
 * @param string $api
 *   API identifier
 * @param string $method
 *   Method to invoke
 *
 * @return bool
 *   True if method is available
 */
function os2web_esdh_provider_supports($api, $method) {
  ctools_include('plugins');
  if ($plugin = array_shift(ctools_get_plugins('os2web_esdh_provider', $api))) {
    return function_exists(ctools_plugin_get_function($plugin, $method));
  }
  else {
    return FALSE;
  }
}

/**
 * Invokes a method from an api.
 *
 * @return any
 *   Fowarded return value from method
 */
function os2web_esdh_provider_invoke() {
  /* Expects:
   * $arg[0] $api
   * $arg[1] $method
   * $ars[2:] additional arguments passed to the method
   */

  $args = func_get_args();
  $api = array_shift($args);
  $method = array_shift($args);
  ctools_include('plugins');
  $plugin = array_shift(ctools_get_plugins('os2web_esdh_provider', $api));
  if ($plugin) {
    $function = ctools_plugin_get_function($plugin, $method);
    if ($function) {
      return call_user_func_array($function, $args);
    }
    watchdog('esdh_provider', 'Incomplete api implementation: method %method in api: %api called, but does not exists.', array(
      '%method' => $method,
      '%api' => $api,
        ), WATCHDOG_ERROR);
  }
}

/* * *************** API METHODS BELOW HERE ************************************ */

/**
 * Builds an array with required content for a case structure.
 */
function os2web_esdh_provider_default_case() {
  return array(
    // Int - CaseId.
    'id' => NULL,
    // String.
    'access_code' => NULL,
    // Int.
    'restricted_from_public' => NULL,
  );
}

/**
 * Builds an array with required content for a document structure.
 */
function os2web_esdh_provider_default_document() {
  return array(
    // Int - DocId.
    'id' => NULL,
    // Int - CaseId.
    'case_reference' => NULL,
    // String.
    'title' => NULL,
    // String.
    'last_update' => NULL,
    // String.
    'access_code' => NULL,
    // Int.
    'publication_indicator' => NULL,
    // Bool.
    'lock_status' => NULL,
  );
}

/**
 * Builds an array with required content for a meeting structure.
 */
function os2web_esdh_provider_default_meeting() {
  return array(
    // String.
    'title' => NULL,
    // Int.
    'meeting_id' => NULL,
    // Int.
    'system_id' => NULL,
    // Boolean.
    'publish' => NULL,
    // Int - optional.
    'publication_id' => NULL,
    // Date.
    'creation_date' => NULL,
    // String.
    'description' => NULL,
    // Datetime.
    'meeting_date_start' => NULL,
    // Datetime.
    'meeting_date_finish' => NULL,
    // String.
    'type' => NULL,
    // String.
    'committee' => NULL,
    // String.
    'location' => NULL,
    // File.
    'full_doc' => NULL,
    // item_struct.
    'items' => NULL,
  );
}

/**
 * Builds an array with required content for a meeting-item structure.
 */
function os2web_esdh_provider_default_item() {
  return array(
    // Int.
    'id' => NULL,
    // String.
    'title' => NULL,
    // String.
    'access' => NULL,
    // File[].
    'enclosures' => NULL,
    // bullet_struct.
    'bullets' => NULL,
  );
}

/**
 * Builds an array with required content for a meeting-bullet structure.
 */
function os2web_esdh_provider_default_bullet() {
  return array(
    // String.
    'title' => NULL,
    // String.
    'body' => NULL,
  );
}
