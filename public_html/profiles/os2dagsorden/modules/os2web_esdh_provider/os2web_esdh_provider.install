<?php
/**
 * @file
 * Implements install hooks
 */

/**
 * Implements hook_requirements().
 */
function os2web_esdh_provider_requirements($phase) {
  if ($phase !== 'runtime') {
    return array();
  }
  $t = get_t();
  $plugins = os2web_esdh_provider_ctools_plugin_type();
  $status = $count = count(array_keys($plugins));
  foreach (array_keys($plugins) as $plugin) {
    if (os2web_esdh_provider_has_api($plugin)) {
      $status--;
    }
  }
  if ($status == 0) {
    $value = $t('Fully supported.');
    $severity = REQUIREMENT_OK;
    $desc = $t('All ESDH plugins seems to be working as intended. <a href="admin/config/os2web/esdh_provider">Status</a>');
  }
  elseif ($status < $count) {
    $value = $t('Partial support.');
    $severity = REQUIREMENT_WARNING;
    $desc = $t('Some ESDH plugins not activated! This can lead to not-working or misleading behavior on the site! <a href="admin/config/os2web/esdh_provider">Check status</a>');
  }
  else {
    $value = $t('Not support.');
    $severity = REQUIREMENT_ERROR;
    $desc = $t('No ESDH plugins activated! This can lead to not-working or misleading behavior on the site! <a href="admin/config/os2web/esdh_provider">Check status</a>');
  }

  $requirements['os2web_esdh_provider_plugins'] = array(
    'title' => $t('OS2Web ESDH integration.'),
    'value' => $value,
    'severity' => $severity,
    'description' => $desc,
  );
  $meeting_path = drupal_realpath(variable_get('os2web_meetings_path'));  
    $requirements['os2web_esdh_import_dir'] = array(
      'title' => $t('OS2Web ESDH integration.'),
      'value' => $t('Import directories')
    );
    if (!(is_dir($meeting_path) && is_writable($meeting_path))){
      $requirements['os2web_esdh_import_dir']['severity'] = REQUIREMENT_ERROR;
      $requirements['os2web_esdh_import_dir']['description'] = t('OS2Web meeting import dir %variable is not exists or not writable', array('%variable' => variable_get('os2web_meetings_path')));
    }
    else {
      $requirements['os2web_esdh_import_dir']['severity'] = REQUIREMENT_OK;
      $requirements['os2web_esdh_import_dir']['value'] = t('OS2Web meeting import dir is exists and writable');

    }
  return $requirements;
}

/**
 * Creates the db table
 */
function os2web_esdh_provider_update_7001() {
  $schema = os2web_esdh_provider_schema();
  $table = $schema['os2web_esdh_provider_import'];
  db_create_table('os2web_esdh_provider_import', $table);
}

/**
 * Drops the existing db table and creates a new one (table has been completely remade
 */
function os2web_esdh_provider_update_7002() {
  $schema = os2web_esdh_provider_schema();
  $table = $schema['os2web_esdh_provider_import'];
  db_drop_table('os2web_esdh_provider_import');
  db_create_table('os2web_esdh_provider_import', $table);
}

/**
 * Implements hook_schema().
 */
function os2web_esdh_provider_schema() {
  $schema['os2web_esdh_provider_import'] = array(
    'description' => 'ESDH Provider Import Queue.',
    'fields' => array(
      'nid' => array(
        'description' => 'Node id',
        'type' => 'int',
        'unsigned' => TRUE,
      ),
      'import_status' => array(
        'description' => 'Status of the import',
        'type' => 'varchar',
        'length' => 255,
      ),
      'meeting_xml' => array(
        'description' => 'Manifest filename',
        'type' => 'varchar',
        'length' => 255,
      ),
      'meeting_xmlid' => array(
        'description' => 'ID of meeting XML',
        'type' => 'int',
        'unsigned' => TRUE,
        'not null' => TRUE,
      ),
      'meeting_name' => array(
        'description' => 'Name of meeting',
        'type' => 'varchar',
        'length' => 255,
      ),
      'meeting_sysid' => array(
        'description' => 'SYSID of meeting',
        'type' => 'int',
        'unsigned' => TRUE,
      ),
      'meeting_xml_changed' => array(
        'description' => 'Timestamp of when meeting XML was last changed',
        'type' => 'int',
        'unsigned' => TRUE,
      ),
      'agenda_sysid' => array(
        'description' => 'SYSID of agenda',
        'type' => 'int',
        'unsigned' => TRUE,
        'not null' => TRUE,
      ),
      'agenda_xml' => array(
        'description' => 'Agenda filename',
        'type' => 'varchar',
        'length' => 255,
      ),
      'agenda_xmlid' => array(
        'description' => 'ID of agenda XML',
        'type' => 'int',
        'unsigned' => TRUE,
      ),
      'agenda_access' => array(
        'description' => 'Access to agenda',
        'type' => 'int',
        'unsigned' => TRUE,
      ),
      'agenda_publish' => array(
        'description' => 'Publish status of agenda',
        'type' => 'int',
        'unsigned' => TRUE,
      ),
      'agenda_type' => array(
        'description' => 'Type of agenda',
        'type' => 'varchar',
        'length' => 255,
      ),
      'agenda_xml_changed' => array(
        'description' => 'Timestamp of when agenda XML was last changed',
        'type' => 'int',
        'unsigned' => TRUE,
      ),
      'committeed_id' => array(
        'description' => 'ID of the committee',
        'type' => 'int',
        'unsigned' => TRUE,
      ),
      'committeed_tid' => array(
        'description' => 'TID of the committee term',
        'type' => 'int',
        'unsigned' => TRUE,
      ),
    ),
    'primary key' => array('meeting_xmlid', 'agenda_sysid'),
  );
  return $schema;
}
