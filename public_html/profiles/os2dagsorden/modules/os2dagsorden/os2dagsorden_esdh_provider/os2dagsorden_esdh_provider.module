<?php

/**
 * Creates additional attachment from the raw enlosure.
 * Also if enclosures has a file in PDF, PDF->HTML conversion is scheduled.
 * @access protected
 *
 * @param array $enclosure  raw information about the enclosure
 * @param mixed $file       file object to be attached to the attachment
 *
 * @return int  $nid        node id of the created attachment
 */
function os2dagsorden_esdh_provider_process_enclosure($enclosure, $file){
  global $PROCESSING_MEETING_ID, $PROCESSING_BP;

  //creating attachment content
  $node = new stdClass();
  $node->type = "os2web_meetings_bullet_attach";
  $node->language = LANGUAGE_NONE;

  node_object_prepare($node);

  if (variable_get('os2dagsorden_add_type_prefix', 'true') === 'true'  && !isset($enclosure['is_bp_summary']))
     $node->title = $enclosure['type'] . ': ' . (($enclosure['title']) ? $enclosure['title'] : 'Indhold');
  else
     $node->title = ($enclosure['title'])? $enclosure['title'] : 'Indhold';

  watchdog('acadre MM', '[XML_ID: !id] [BP: !sysid] [BPA: !bpa] Initialized BPA import: !title',
    array('!id' => $PROCESSING_MEETING_ID, '!sysid' => $PROCESSING_BP, '!bpa' => $enclosure['sysid'], '!title' => $node->title), WATCHDOG_INFO);

  if (strlen($node->title) > 254)
    $node->title = substr($node->title, 0, 254);
  if (isset($enclosure['sysid']))
    $node->field_os2web_meetings_bpa_id[$node->language][0]['value'] =  $enclosure['sysid'];
  $node->field_os2web_meetings_bpa_file[$node->language][] = (array) $file;
  if (!$enclosure['access'])
    $node->field_os2web_meetings_bpa_closed[$node->language][0]['value'] = 1;
  else
    $node->field_os2web_meetings_bpa_closed[$node->language][0]['value'] = 0;

  $node->field_os2web_meetings_bpa_type[$node->language][0]['value']=$enclosure['type'];

  node_submit($node);
  node_save($node);
  watchdog('acadre MM', '[XML_ID: !id] [BP: !sysid] [BPA: !bpa] Finished BPA import, nid: !nid',
    array('!id' => $PROCESSING_MEETING_ID, '!sysid' => $PROCESSING_BP, '!bpa' => $enclosure['sysid'], '!nid' => $node->nid), WATCHDOG_INFO);

  //PDF conversion
  if (module_exists("os2dagsorden_pdf2htmlex")){
    if (file_get_mimetype($file->uri) === 'application/pdf')//if is PDF, schedule for HTML conversion
      os2dagsorden_pdf2htmlex_schedule($file->fid, $node->nid);
  }

  return $node->nid;
}


/**
 * Adds the subid to the committee term, if this subid has not been added there before.
 * @access protected
 *
 * @param term Object $committee_term committee term object
 * @param int         $sub_id         subid to be added
 *
 * @return none
 */
function os2dagsorden_esdh_provider_committee_add_subid($committee_term, $sub_id){
  //check already has this subid
  $contains = FALSE;
  if (isset($committee_term->field_os2web_meetings_com_subid['und'])) {
      foreach ($committee_term->field_os2web_meetings_com_subid['und'] as $id_raw) {
          if (intval($id_raw['value']) == intval($sub_id)) {
              $contains = TRUE;
              break;
          }
      }
  }

  //if does not have
  if (!$contains) {
    $committee_term->field_os2web_meetings_com_subid['und'][]['value'] = $sub_id;
    taxonomy_term_save($committee_term);
  }
}

/**
 * Checks if there is a meeting analogue imported from SOFD system.
 * @access protected
 *
 * @param term Object $committee      committee term object
 * @param String      $meeting_start  start date of the meeting
 * @param String      $meeting_finish end date of the meeting
 *
 * @return Object     $found_meeting  found meeting, if any, void otherwise
 */
function os2dagsorden_esdh_provider_find_sofd_meeting($committee, $meeting_start, $meeting_finish){
  //getting meeting
  $meeting_start_date_0000 = date('Y-m-d 00:00:00', strtotime($meeting_start));
  $meeting_start_date_2359 = date('Y-m-d 23:59:59', strtotime($meeting_finish));

  $query = new EntityFieldQuery();
  $query->entityCondition('entity_type', 'node')
      ->propertyCondition('type', 'os2web_meetings_meeting')
      ->fieldCondition('field_os2web_meetings_date', 'value', $meeting_start_date_0000, '>=')
      ->fieldCondition('field_os2web_meetings_date', 'value', $meeting_start_date_2359, '<=')
      //no meeting system ID's - avoiding overlapping meetings of same committee on the same date
      ->fieldCondition('field_os2web_meetings_system_id', 'value', '0', '=')
      ->fieldCondition('field_os2web_meetings_committee', 'tid', $committee->tid, '=');
  $result = $query->execute();

  if (isset($result['node'])) {
      $found_meeting = node_load(array_shift($result['node'])->nid);
      return $found_meeting;
  }
}

/**
 * Adds a number to the bullet point
 *
 * @param node object $node   bullet point
 * @param int         $number the number to add
 *
 * @return Object     $node   updated bullet point
 */
function os2dagsorden_esdh_provider_bullet_add_number($node, $number){
  $node->field_os2web_meetings_bul_number[LANGUAGE_NONE][0]['value'] = $number;
  return $node;
}

/**
 * Implements hook_node_delete().
 *
 * Deletes the associated speaker papers when deleting bullets
 */
function os2dagsorden_esdh_provider_node_delete($node){
  if ($node->type === 'os2web_meetings_bullet') {
    $query = new EntityFieldQuery();
    $query->entityCondition('entity_type', 'node')
        ->propertyCondition('type', array('os2web_meetings_spaper'))
        ->fieldCondition('field_os2web_meetings_sp_bullet', 'target_id', $node->nid, '=');

    $result = $query->execute();
    if (isset($result['node'])){
      $nids = array_keys($result['node']);
      foreach ($nids as $nid)
        node_delete($nid);
    }
  }
}

/**
 * Appends word "Tillægsdagsorden" to the bullet title if bullet is of type additional dagsorden
 *
 * @param $node
 * @param $is_additional
 * @return mixed
 */
function os2dagsorden_esdh_provider_handle_additional_bullet($node, $is_additional){
  if ($is_additional){
    $node->title = 'Tillægsdagsorden: ' . $node->title;
  }
  return $node;
}

/**
 * Appends word "Tillægsdagsorden" to the meeting title if meeting is of type additional dagsorden
 *
 * @param $node
 * @param $agenda_name
 * @return mixed
 */
function os2dagsorden_esdh_provider_handle_additional_meeting($node, $agenda_name){
  if (stripos($agenda_name, 'tillæg') !== FALSE){
    $node->title = 'Tillægsdagsorden: ' . $node->title;
    //$node->title = $agenda_name . ' ' . $node->title;
  }
  return $node;
}
/**
 * return TRUE if closed attachments must be imported
 *
 * @return boolean
 */
function os2dagsorden_esdh_provider_import_closed_attachment () {
    return TRUE;
}

/**
 * Assigned meeting's category based on the list of committees provided in the settings
 *
 * @param $node
 * @param $committee_subid
 * @return mixed
 */
function os2dagsorden_esdh_provider_assign_meeting_category($node, $committee_subid){
  $pol_committees = array_map('trim', explode(',', variable_get('os2dagsorden_committee_category_pol', '')));
  if (in_array($committee_subid, $pol_committees))
    $node->field_os2web_meetings_category[LANGUAGE_NONE][0]['value'] = 'pol';

  $org_committees = array_map('trim', explode(',', variable_get('os2dagsorden_committee_category_org', '')));
  if (in_array($committee_subid, $org_committees))
    $node->field_os2web_meetings_category[LANGUAGE_NONE][0]['value'] = 'org';

  return $node;
}

/**
 * Returns the corresponding bullet if exists, bases on the name
 *
 * @param $title
 * @param $sys_id
 * @param $bullet_nids
 * @return mixed
 */
function os2dagsorden_esdh_provider_find_corresponding_bullet($title, $sys_id, $bullet_nids){
  foreach($bullet_nids as $bullet_nid){
    $bullet = node_load($bullet_nid['target_id']);
    if (strcasecmp($title, $bullet->title) == 0) {
      return $bullet;
    } elseif (strcasecmp($sys_id, $bullet->field_os2web_bullet_point_id['und'][0]['value']) == 0) {
      return $bullet;
    }
  }
  return NULL;
}

/**
 * Returns the corresponding attachment if exists, bases on the name and content
 *
 * @param $bullet_entity
 * @param $attachment_nids
 * @return mixed
 */
function os2dagsorden_esdh_provider_find_corresponding_attachment($bullet_entity, $attachment_nids){
  foreach($attachment_nids as $attachment_nid){
    $attachment = node_load($attachment_nid['target_id']);
    if (strcasecmp($bullet_entity['title'], $attachment->title) == 0
      && strcasecmp($bullet_entity['body'], $attachment->field_os2web_meetings_bpa_body[$attachment->language][0]['value']) == 0){
      return $attachment;
    }
  }
  return NULL;
}

/**
 * This function will either returns the existing committee or create a new one
 *
 * @param $sub_id
 * @param $name
 * @return $committee term
 */
function osdagsorden_esdh_provider_import_or_return_committee($sub_id, $name){
 $term =_os2dagsorden_access_helper_get_committee_by_subid_and_name($sub_id, $name);
 if (!$term ){
    $term = _acadre_esdh_import_term($name, 'os2web_meetings_tax_committee');
    os2dagsorden_esdh_provider_committee_add_subid($term, $sub_id);
  }
  else {
      // check if has parent term
      $parent_tids = taxonomy_get_parents($term->tid);
      if(!empty($parent_tids)){
      $tid = reset($parent_tids);

      $term = taxonomy_term_load($tid->tid);
  }
  }
  return $term;
}

/**
 * This functions will returns the found bullet point based on provided sysid
 *
 * @param $sysid
 * @return $bullet nid
 */
function os2dagsorden_esdh_provider_find_bullet_by_sysid($sysid){
  $query = new EntityFieldQuery();
  $query->entityCondition('entity_type', 'node')
    ->fieldCondition('field_os2web_bullet_point_id', 'value', $sysid, '=');

  $result = $query->execute();

  if (isset($result['node'])) {
    $nids = array_keys($result['node']);
    return reset($nids);
  }
}

/**
 * This function will try to find an equal bullet point in the additional (tillaægs) agendas.
 * If the bullet point is found, it is then reassigned to a new meeting and removed from the previous meeting.
 * Bullet point related information references (e.g. user notes) are also updated.
 *
 * @param $bullet_sysid
 * @param $meeting_nid nid of the meeting where the bullet point should be reassigned to
 * @return $bullet found bullet point or null
 */
function os2dagsorden_esdh_provider_find_and_reassign_additional_agenda_bullet($bullet_sysid, $meeting_nid){
  $add_bullet_nid = os2dagsorden_esdh_provider_find_bullet_by_sysid($bullet_sysid);

  if ($add_bullet_nid) {
    //find additional/tillægs meetings
    $add_meetings_nids = os2dagsorden_access_helper_tillaegs_meetings($meeting_nid);

    $add_bullet_meeting = os2dagsorden_access_helper_get_meeting_by_bullet_point($add_bullet_nid);
    if (in_array($add_bullet_meeting->nid, $add_meetings_nids)) {
      watchdog('acadre MM', '[XML_ID: !id] [BP: !sysid] Found existing BP node nid: !nid from meeting nid: !meeting_nid',
        array('!id' => $meeting_nid, '!sysid' => $bullet_sysid, '!nid' => $add_bullet_nid,
          '!meeting_nid' => $add_bullet_meeting->nid), WATCHDOG_INFO);

      $node = node_load($add_bullet_nid);

      //remove bullet from prev. meeting
      if (!empty($add_bullet_meeting->field_os2web_meetings_bullets['und'])) {
        foreach ($add_bullet_meeting->field_os2web_meetings_bullets['und'] as $ref_bullet_point_number => $ref_bullet_point) {
          if (intval($add_bullet_nid) == intval($ref_bullet_point['target_id'])) {
            unset($add_bullet_meeting->field_os2web_meetings_bullets['und'][$ref_bullet_point_number]);
            node_save($add_bullet_meeting);
            break;
          }
        }
      }

      //update annotation references
      os2dagsorden_annotator_update_notes_meeting($add_bullet_meeting->nid, $meeting_nid);

      return $node;
    }
  }

  return null;
}

/**
 * Remaps the notes from attachments that are going to be deleted to the new attachments.
 * That is useful when the attachments are going to be substituted
 *
 * @param $attachments_to_delete_nids
 * @param $existing_attachments_nids
 */
function os2dagsorden_esdh_provider_reassign_notes($attachments_to_delete_nids, $existing_attachments_nids){
  $attachments_to_delete = node_load_multiple($attachments_to_delete_nids);
  $existing_attachments = node_load_multiple($existing_attachments_nids);

  foreach ($attachments_to_delete as $del_nid => $del_node) {
    if (os2dagsorden_annotator_get_notes_by_attachment_id($del_nid)) {
      //finding the corresponding bullet point from the existing attachments
      foreach($existing_attachments as $exist_nid => $exist_node) {
        if (strcasecmp($del_node->title,$exist_node->title) == 0) {
          os2dagsorden_annotator_update_notes_attachment($del_nid, $exist_nid);

          //remove from stack, as we won't need it anymore
          unset($existing_attachments[$exist_nid]);
        }
      }
    }
  }
}