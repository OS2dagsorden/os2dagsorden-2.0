<?php

/**
 * OS2Web_Print_Send_to_Friend
 *
 * PHP version 5
 *
 * @category OS2Web
 * @package  OS2Web_Print_Send_to_Friend
 * @author   Stanislav Kutasevits <stan@bellcom.dk>
 * @license  http://www.gnu.org/licenses/gpl-2.0.html GNU General Public License, version 2
 * @link     http://bellcom.dk
 */
require drupal_get_path('module', 'os2web_print_send_to_friend') . '/includes/os2web_print_send_to_friend.inc';

/**
 * Implementation of hook_menu().
 *
 * @return array of links.
 */
function os2web_print_send_to_friend_menu() {
  $items = array();

  $items['meeting/%/bullet-point/%/print'] = array(
    'title' => 'Print Dagsorden Punkt',
    'type' => MENU_CALLBACK,
    'page callback' => 'os2web_print_send_to_friend_print_bullet_point',
    'page arguments' => array(3),
    'access arguments' => array(1, 3),
    'access callback' => 'os2dagsorden_access_helper_check_user_can_see_bullet_point',
  );

  $items['meeting/%/bullet-point/%/send_to_friend_form'] = array(
    'title' => 'Send dagsorden punkt til venner',
    'type' => MENU_CALLBACK,
    'page callback' => 'os2web_print_send_to_friend_send_to_friend_form',
    'page arguments' => array(1, 3),
    'access arguments' => array(1, 3),
    'access callback' => 'os2dagsorden_access_helper_check_user_can_send_bullet_point',
  );

  $items['meeting/%/bullet-point/%/send_to_friend_service'] = array(
    'title' => 'Dagsorden Punkt Send til venner',
    'type' => MENU_CALLBACK,
    'page callback' => 'os2web_print_send_to_friend_send_to_friend',
    'page arguments' => array(1, 3),
    'access arguments' => array(1, 3),
    'access callback' => 'os2dagsorden_access_helper_check_user_can_see_bullet_point',
  );
  $items['meeting/%/print'] = array(
    'title' => 'Print Dagsorden',
    'type' => MENU_CALLBACK,
    'page callback' => 'os2web_print_send_to_friend_print_dagsorden',
    'page arguments' => array(1),
    'access arguments' => array('access content'),
  );
  $items['admin/reports/send_to_friend_log'] = array(
    'title' => 'Send to friend log Report',
    'description' => t('View events that have been logged.'),
    'page callback' => 'drupal_get_form',
    'page arguments' => array('os2web_print_send_to_friend_log_filter_form'),
    'access arguments' => array('administer os2web'),
    'type' => MENU_NORMAL_ITEM,
  );


  return $items;
}

/**
 * Implements hook_monolog_channel_info().
 */
function os2web_print_send_to_friend_monolog_channel_info() {
  $channels = array();

  $channels['os2web_send_to_friend_channel'] = array(
    'label' => t('Send to friend'),
    'description' => t('Channel for handling bullet point sharing - "Send til ven"'),
    'default profile' => 'Send to friend',
  );

  return $channels;
}

function os2web_print_send_to_friend_monolog_handler_info() {
  $handlers = array();

  $handlers['send_to_friend_db'] = array(
    'label' => t('Send to friend (database)'),
    'description' => t('Logs records into send to friend database table'),
    // 'default settings' => array(
    // 'filepath' => 'public://monolog/drupal.log',
    //),
    'settings callback' => 'os2web_print_send_to_friend_handler_settings',
    'loader callback' => 'os2web_print_send_to_friend_handler_loader',
    // 'handler file' => 'MODULE_PATH/handlers/database.inc'
    // "handler file" defaults to `MODULE_PATH/handlers/stream.inc` since the
    // hook_monolog_handler_path() returns "handlers".
  );
  return $handlers;
}

function os2web_print_send_to_friend_handler_settings(&$form, &$form_state) {
  
}

use Monolog\Handler\MySQLHandler;

/**
 * Monolog loader callback; Loads a ChromePHPHandler handler.
 *
 * @return HandlerInterface
 */
function os2web_print_send_to_friend_handler_loader($options) {

  return new MySQLHandler(Database::getConnection(), 'os2web_print_send_to_friend_log', array('uid', 'bullet_point_uri', 'email'), $options['level'], $options['bubble']);
}

function os2web_print_send_to_friend_add_to_log($message, $variables = array(), $severity, $context = array()) {
  try {

    // Perform a partial bootstrap if watchdog is called prior to the
    // DRUPAL_BOOTSTRAP_FULL phase.
    if (!function_exists('monolog')) {
      monolog_logging_bootstrap();
    }
    ;
    $logger = monolog('os2web_send_to_friend_channel');
    $message = addslashes(strip_tags(format_string($message, $variables)));
    $level = monolog_logging_map_severity_level($severity);

    $logger->log($level, $message, $context);
  } catch (Exception $e) {

    // Fail silently since we cannot log any messages or do anything that would
    // trigger another watchdog call.
  }
}

function os2web_print_send_to_friend_log_filter_form($form, &$form_state) {
  $form = array();
  $form['filter']['user'] = array(
    '#type' => 'textfield',
    '#title' => t('User'),
    '#size' => 60,
    '#maxlength' => 60,
    '#autocomplete_path' => 'user/autocomplete',
    '#default_value' => $user,
  );
  $form['filter']['email'] = array(
    '#type' => 'textfield',
    '#title' => t('Email'),
    '#size' => 60,
    '#maxlength' => 60,
    '#default_value' => $email,
  );
  $form['filter']['message'] = array(
    '#type' => 'textfield',
    '#title' => t('Message'),
    '#size' => 60,
    '#maxlength' => 60,
    '#default_value' => $message,
  );
  $form['filter']['date']['from'] = array(
    '#type' => 'textfield',
    '#title' => t('Date'),
    '#size' => 30,
    '#maxlength' => 60,
    '#field_prefix' => t('From'),
    '#field_suffix' => t('format: YY-MM-DD HH:MM:SS'),
    '#default_value' => $from,
  );
  $form['filter']['date']['to'] = array(
    '#type' => 'textfield',
    '#size' => 30,
    '#maxlength' => 60,
    '#default_value' => $to,
    '#field_suffix' => t('format: YY-MM-DD HH:MM:SS'),
    '#field_prefix' => t('To'),
  );
  $form['filter']['filter'] = array(
    '#type' => 'submit',
    '#value' => t('Filter'),
  );
  $form['filter']['reset'] = array(
    '#type' => 'submit',
    '#value' => t('Clear'),
    '#weight' => 9,
    '#validate' => array(),
  );

  $headers = array(
    array('data' => t('Date'), 'field' => 'time', 'sort' => 'desc'),
    array('data' => t('Message'), 'field' => 'message'),
    array('data' => t('Bullet point uri'), 'field' => 'bullet_point_uri'),
    array('data' => t('Email'), 'field' => 'email'),
    array('data' => t('User'), 'field' => 'name'));
  $query = db_select('os2web_print_send_to_friend_log', 'l');
  $query->innerJoin('users', 'u', 'l.uid = u.uid');
  $query->fields('l', array('time', 'message', 'bullet_point_uri', 'email'));
  $query->fields('u', array('name'));
  if (isset($form_state['user']) && !empty($form_state['user'])) {
    $query->condition('u.name', '%' . db_like($form_state['user']) . '%', 'LIKE');
  }

  if (isset($form_state['email']) && !empty($form_state['email'])) {
    $query->condition('l.email', '%' . db_like($form_state['email']) . '%', 'LIKE');
  }
  if (isset($form_state['message']) && !empty($form_state['message'])) {
    $query->condition('l.message', '%' . db_like($form_state['message']) . '%', 'LIKE');
  }
  if (isset($form_state['date']['from']) && isset($form_state['date']['to']) && !empty($form_state['date']['from']) && !empty($form_state['date']['to']))
    $query->condition('l.time', array(strtotime($form_state['date']['from']), strtotime($form_state['date']['to'])), 'BETWEEN');
  elseif (isset($form_state['date']['from']) && !empty($form_state['date']['from']))
    $query->condition('l.time', strtotime($form_state['date']['from']), '>');
  elseif (isset($form_state['date']['to']) && !empty($form_state['date']['to']))
    $query->condition('l.time', strtotime($form_state['date']['to']), '<');

  $query->extend('TableSort') // Add table sort extender.
    ->orderByHeader($headers);
  $pager = $query->extend('PagerDefault')
    ->limit(50);
  $result = $pager->execute()
    ->fetchAllAssoc('time');

  $rows = array();

  foreach ($result as $row) {
    $row->time = date('d-m-Y H:i:s', $row->time);
    $rows[] = array_values((array) $row);
  }

  $form['table'] = array(
    '#theme' => 'table',
    '#header' => $headers,
    '#rows' => $rows,
  );
  return $form;
}

function os2web_print_send_to_friend_log_filter_form_submit($form, &$form_state) {
  if ($form_state["values"]["op"] == 'Clear') {
    $form_state['values']['user'] = "";
    $form_state['values']['email'] = "";
    $form_state['values']['message'] = "";
    $form_state['values']['from'] = "";
    $form_state['values']['to'] = "";
  } else {
    $form_state['user'] = $form_state['values']['user'];
    $form_state['email'] = $form_state['values']['email'];
    $form_state['message'] = $form_state['values']['message'];
    $form_state['date']['from'] = $form_state['values']['from'];
    $form_state['date']['to'] = $form_state['values']['to'];
    $form_state['rebuild'] = TRUE;
  }
}
