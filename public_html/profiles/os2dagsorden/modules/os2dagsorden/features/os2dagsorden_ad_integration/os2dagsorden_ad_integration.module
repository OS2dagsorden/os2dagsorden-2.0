<?php
/**
 * @file
 * Code for the OS2Web AD Integration feature.
 */

include_once('os2dagsorden_ad_integration.features.inc');

/**
 * Implements hook_menu.
 */
function os2dagsorden_ad_integration_menu() {
  $items = array();
  $items['admin/config/people/ldap/users_sync'] = array(
    'title' => 'User sync settings',
    'access arguments' => array('administer os2web'),
    'page callback' => 'drupal_get_form',
    'page arguments' => array('os2dagsorden_ad_integration_user_sync_settings_form'),
    'type' => MENU_LOCAL_TASK,
    'position' => 'right',
    'weight' => 150,
  );

  $items['os2dagsorden/run_user_sync'] = array(
    'page callback' => 'os2dagsorden_ad_integration_do_user_sync',
    'access arguments' => array('administer os2web'),
    'type' => MENU_CALLBACK,
  );
  return $items;
}

/**
 * The custom setting form for LDAP AD integration
 *
 * @param $form
 * @param $form_state
 * @return mixed
 */
function os2dagsorden_ad_integration_user_sync_settings_form($form, $form_state) {
  $form['os2dagsorden_ad_integration_user_sync_query_fieldset'] = array(
    '#type' => 'fieldset',
    '#collapsible' => TRUE,
    '#collapsed' => FALSE,
    '#title' => t('LDAP Query'),
  );
  $form['os2dagsorden_ad_integration_user_sync_query_fieldset']['os2dagsorden_ad_integration_user_sync_dn_str'] = array(
    '#type' => 'textarea',
    '#title' => 'Base DNs to search in query.',
    '#description' => 'Each Base DN will be queried and results merged. e.g. ou=campus accounts,dc=ad,dc=uiuc,dc=eduEnter one per line in case if you need more than one.',
    '#default_value' => variable_get('os2dagsorden_ad_integration_user_sync_dn_str'),
    '#required' => TRUE,
  );
  $form['os2dagsorden_ad_integration_user_sync_query_fieldset']['os2dagsorden_ad_integration_user_inactive_sync_dn_str'] = array(
    '#type' => 'textarea',
    '#title' => 'Inactive users base DNs to search in query.',
    '#description' => 'Each Base DN will be queried and results merged. e.g. ou=campus accounts,dc=ad,dc=uiuc,dc=eduEnter one per line in case if you need more than one.',
    '#default_value' => variable_get('os2dagsorden_ad_integration_user_inactive_sync_dn_str'),
    '#required' => TRUE,
  );
  $form['os2dagsorden_ad_integration_user_sync_query_fieldset']['os2dagsorden_ad_integration_user_sync_filter'] = array(
    '#type' => 'textarea',
    '#title' => 'Filter',
    '#description' => 'LDAP query filter such as (objectClass=group) or (&(objectClass=user)(homePhone=*))',
    '#default_value' => variable_get('os2dagsorden_ad_integration_user_sync_filter'),
    '#required' => TRUE,
  );
  $form['os2dagsorden_ad_integration_user_sync_query_fieldset']['os2dagsorden_ad_integration_user_sync_attr'] = array(
    '#type' => 'textarea',
    '#title' => 'Attributes to return.',
    '#description' => 'Enter as comma separated list. DN is automatically returned. Leave empty to return all attributes. e.g. objectclass,name,cn,samaccountname',
    '#default_value' => variable_get('os2dagsorden_ad_integration_user_sync_attr'),
    '#required' => TRUE,
  );
  return system_settings_form($form);
}

/**
 * Implementation of hook_cronapi().
 */
function os2dagsorden_ad_integration_cronapi($op, $job = NULL) {
  switch ($op) {
    case 'list':
      return array('os2dagsorden_ad_integration_cron' => t("Sync LDAP users"));
  }
}

/**
 * Implementation of hook_cron().
 * Fires all imports.
 *
 * @return none
 */
function os2dagsorden_ad_integration_cron() {
  os2dagsorden_ad_integration_do_user_sync();
  os2dagsorden_ad_integration_do_user_inactive_sync();
}

/**
 * Callback to start user import
 * Syncs the user information, as well as creates the custom user groups, such as speaper paper user groups
 */
function os2dagsorden_ad_integration_do_user_sync() {
  if (variable_get('os2dagsorden_ad_integration_user_sync_attr', '') == '' || variable_get('os2dagsorden_ad_integration_user_sync_filter', '') == '' || variable_get('os2dagsorden_ad_integration_user_sync_dn_str', '') == '') {
    watchdog('LDAP_user_sync', 'LDAP user sync query options missing. ', WATCHDOG_ERROR);

    return;
  }
  if ($ldap_servers = ldap_servers_get_servers(NULL, 'enabled')) {
    // Get first server.
    $ldap_server = current($ldap_servers);
    // Run a search.

    $filters = variable_get('os2dagsorden_ad_integration_user_sync_filter', '');
    $attr = explode(',', variable_get('os2dagsorden_ad_integration_user_sync_attr', ''));

    $dn_str_values = preg_split('/\r\n|[\r\n]/', variable_get('os2dagsorden_ad_integration_user_sync_dn_str', ''));
    foreach ($dn_str_values as $dn_str) {
      $results = $ldap_server->search($dn_str, $filters, $attr);
      for ($i = 0; $i < $results["count"]; $i++) {
        $name = $results[$i]['mailnickname'][0];
        $mail = $results[$i]['mail'][0];

        if (!empty($results[$i]['displayname'][0])) {
          $full_name = $results[$i]['displayname'][0];
        }
        else {
          $full_name = $results[$i]['name'][0];
        }
        $company = $results[$i]['physicaldeliveryofficename'][0];

        $terms = array();
        _os2dagsorden_ad_integration_get_speaker_paper_group($ldap_server, $results[$i], $terms);

        if (!empty($mail) && !empty($name) && $name != "admin") {
          if ($u = user_load_by_name($name)) {
            $user = $u;
          }
          else {
            if ($m = user_load_by_mail($mail)) {
              $user = $m;
            }
            else {
              $user = new stdClass();
              $user->name = $name;
              $user->mail = $mail;
              $user->status = 1;
              $user->field_user_can_send_closed_bp['und'][0]['value'] = 0;
              $user->roles = array(DRUPAL_AUTHENTICATED_RID => 'godkendt bruger', 3 => 'os2dagsorden');
            }
          }
          $user->field_user_organization['und'][0]['value'] = $company;
          $user->field_user_full_name['und'][0]['value'] = $full_name;

          //add user to speaker paper group
          if ($terms) {
            foreach ($terms as $term) {
              //add only if user is newly created or does not have this group already
              if (!$user->uid ||
                !in_array($term->tid, os2dagsorden_access_helper_get_user_sp_groups($user->uid))
              ) {
                $user->field_user_sp_groups['und'][]['tid'] = $term->tid;
              }
            }
          }

          user_save($user);
          watchdog('LDAP_user_sync', 'User %user imported', array('%user' => $name), WATCHDOG_INFO);
        }
      }
    }
  }
  else {
    watchdog('LDAP_user_sync', 'LDAP connection error. ', WATCHDOG_ERROR);
  }
}

/**
 * Callback to start user synch
 * Deactivates the users that have to be deactivated
 */
function os2dagsorden_ad_integration_do_user_inactive_sync() {
  if (variable_get('os2dagsorden_ad_integration_user_sync_attr', '') == '' || variable_get('os2dagsorden_ad_integration_user_sync_filter', '') == '' || variable_get('os2dagsorden_ad_integration_user_inactive_sync_dn_str', '') == '') {
    watchdog('LDAP_user_sync', 'LDAP user sync query options missing. ', WATCHDOG_ERROR);

    return;
  }
  if ($ldap_servers = ldap_servers_get_servers(NULL, 'enabled')) {
    // Get first server.
    $ldap_server = current($ldap_servers);
    // Run a search.

    $filters = variable_get('os2dagsorden_ad_integration_user_sync_filter', '');
    $attr = explode(',', variable_get('os2dagsorden_ad_integration_user_sync_attr', ''));

    $dn_str_values = preg_split('/\r\n|[\r\n]/', variable_get('os2dagsorden_ad_integration_user_inactive_sync_dn_str', ''));
    foreach ($dn_str_values as $dn_str) {
      $results = $ldap_server->search($dn_str, $filters, $attr);
      for ($i = 0; $i < $results["count"]; $i++) {
        $name = $results[$i]['mailnickname'][0];
        $mail = $results[$i]['mail'][0];

        if (!empty($mail) && !empty($name) && $name != "admin") {
          if ($u = user_load_by_name($name)) {
            $user = $u;
          }
          else {
            if ($m = user_load_by_mail($mail)) {
              $user = $m;
            }
          }

          if ($user && $user->status != 0) {
            $user->status = 0;
            user_save($user);
            watchdog('LDAP_user_sync', 'User %user deactivated', array('%user' => $name), WATCHDOG_INFO);
          }
        }
      }
    }
  }
  else {
    watchdog('LDAP_user_sync', 'LDAP connection error. ', WATCHDOG_ERROR);
  }
}

/**
 * Gets a speaker paper group from memberof attribute of the provided data.
 * If a SOFD Grupper is encountered then function will recursively search is any of the parent is speaker paper group.
 *
 * @param $ldap_server
 * @param $data
 * @param $terms
 */
function _os2dagsorden_ad_integration_get_speaker_paper_group($ldap_server, $data, &$terms) {
  if (isset($data['memberof'])) {
    foreach ($data['memberof'] as $memberof) {
      $memberof_parts = explode(',', $memberof);
      //creating nice array
      $keyed_memberof_parts = array();
      foreach ($memberof_parts as $memberofpart) {
        $memberofpart_parts = explode('=', $memberofpart);
        $keyed_memberof_parts[$memberofpart_parts[0]][] = $memberofpart_parts[1];
      }

      if (is_array($keyed_memberof_parts['OU'])) {
        if (in_array('Talepapir', $keyed_memberof_parts['OU'])) {
          //if yes get the Talepapir group custom name
          $name = $keyed_memberof_parts['CN'][0];
          $term = os2dagsorden_access_helper_fetch_or_create_taxonomy_term($name, 'os2web_users_tax_sp_group');

          $terms[] = $term;
        }
        elseif (in_array('SOFD Grupper', $keyed_memberof_parts['OU'])) {
          //if yes, get the group name
          $name = $keyed_memberof_parts['CN'][0];

          //and perform a new search
          $result = $ldap_server->search("OU=SOFD Grupper,OU=grupper,OU=syddjurs,DC=intern,DC=syddjurs,DC=dk", "(&(objectclass=group)(name=$name))", array(
            'name',
            'memberof'
          ));
          if (is_array($result)) {
            _os2dagsorden_ad_integration_get_speaker_paper_group($ldap_server, $result[0], $terms);
          }
        }
      }
    }
  }
}
