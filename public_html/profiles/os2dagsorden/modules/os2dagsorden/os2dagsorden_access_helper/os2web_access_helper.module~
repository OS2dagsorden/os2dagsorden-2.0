<?php
/**
* os2dagsorden_access_helper
*
* PHP version 5
*
* @category OS2Dagsorden
* @package  OS2Dagsorden_Access_Helper
* @author   Stanislav Kutasevits <stan@bellcom.dk>
* @license  http://www.gnu.org/copyleft/gpl.html GNU General Public License
* @link     http://bellcom.dk
*/

/**
 * Checks if given meeting has speaker paper of the current user attached.
 *
 * @param int $meeting_id ID of the meeting
 *
 * @return true of false
 */
function os2web_access_helper_meeting_has_speaker_paper($meeting_id) 
{
    $meetings = entity_load('node', array($meeting_id));
    $meeting = $meetings[$meeting_id];
    if (isset($meeting->field_ref_bullet_points['und'])) {
        foreach ($meeting->field_ref_bullet_points['und'] as $bullet_point) {
            if (os2web_access_helper_bullet_point_has_speaker_paper($bullet_point['target_id']))
                return TRUE;
        }
    }

    return FALSE;
}

/**
 * Checks if given bullet point has speaker paper of the current user attached.
 *
 * @param int $bullet_point_id ID of the bullet point
 *
 * @return true of false
 */
function os2web_access_helper_bullet_point_has_speaker_paper($bullet_point_id) 
{
    global $user;
    $query = new EntityFieldQuery();
    $query->entityCondition('entity_type', 'node')
        ->propertyCondition('type', array('speaker_paper'))
        ->propertyCondition('uid', $user->uid)
        ->fieldCondition('field_ref_bullet_point', 'target_id', $bullet_point_id, '=');

    $result = $query->execute();

    return isset($result['node']);
}

/**
 * Checks if current user is allowed the access the bullet point.
 *
 * @param int $meeting_id      ID of the meeting
 * @param int $bullet_point_id ID of the bullet point
 *
 * @return true of false
 */
function os2web_access_helper_check_user_can_see_bullet_point($meeting_id, $bullet_point_id) 
{
    global $user;

    if (!$user->uid)
        return FALSE;

    if (os2web_access_helper_check_bullet_point_is_part_of_meeting($meeting_id, $bullet_point_id)) {
        $bullet_points = entity_load('node', array($bullet_point_id), array('type' => 'bullet_point'));
        $is_closed = $bullet_points[$bullet_point_id]->field_bul_point_closed['und'][0]['value'];

        if (intval($is_closed) == 0) { //is opened
            return TRUE;
        }
        else { //is closed
            $user_ent = entity_load('user', array($user->uid));

            $meetings = entity_load('node', array($meeting_id), array('type' => 'meeting'));
            $meeting_committee_id = $meetings[$meeting_id]->field_committee['und'][0]['tid'];

            if (!empty($user_ent[$user->uid]->field_user_committee)) {  //is part of the committee
                foreach ($user_ent[$user->uid]->field_user_committee['und'] as $user_committee_id) {
                    if (intval($meeting_committee_id) == $user_committee_id['tid']) {
                        return TRUE;
                    }
                }
            }

            if (!empty($user_ent[$user->uid]->field_follows_committee_plus)) {  //follows committee PLUS
                foreach ($user_ent[$user->uid]->field_follows_committee_plus['und'] as $user_committee_id) {
                    if (intval($meeting_committee_id) == $user_committee_id['tid']) {
                        return TRUE;
                    }
                }
            }
            //none of the above, access denied
            return FALSE;
        }
    } 
    else
        return FALSE;
}

/**
 * Checks if current user is allowed the access the bullet point attachment.
 *
 * @param int $meeting_id                 ID of the meeting
 * @param int $bullet_point_id            ID of the bullet point
 * @param int $bullet_point_attachment_id ID of the attachment
 *
 * @return true of false
 */
function os2web_access_helper_check_user_can_see_bullet_point_attachment($meeting_id, $bullet_point_id, $bullet_point_attachment_id) 
{
    if (os2web_access_helper_check_attachment_is_part_of_bullet_point($bullet_point_id, $bullet_point_attachment_id))
        return os2web_access_helper_check_user_can_see_bullet_point($meeting_id, $bullet_point_id);
    else
        return FALSE;
}

/**
 * Checks if the bullet point is actually part of the meeting
 *
 * @param int $meeting_id   ID of the meeting
 * @param int $bullet_point ID of the bullet point
 *
 * @return true of false
 */
function os2web_access_helper_check_bullet_point_is_part_of_meeting($meeting_id, $bullet_point_id) 
{
    $meetings = entity_load('node', array($meeting_id), array('type' => 'meeting'));
    $meeting = $meetings[$meeting_id];

    $contains = FALSE;
    if (!empty($meeting->field_ref_bullet_points['und'])) {
        foreach ($meeting->field_ref_bullet_points['und'] as $ref_bullet_point) {
            if (intval($bullet_point_id) == intval($ref_bullet_point['target_id'])) {
                $contains = TRUE;
                break;
            }
        }
    }
    return $contains;
}

/**
 * Checks if the bullet point attachment is actually part of the bullet point.
 *
 * @param int $bullet_point_id ID of the bullet point
 * @param int $bilag_id        ID of the bullet point attachment
 *
 * @return true of false
 */
function os2web_access_helper_check_attachment_is_part_of_bullet_point($bullet_point_id, $bilag_id) 
{
    $bullet_points = entity_load('node', array($bullet_point_id), array('type' => 'bullet_point'));
    $bullet_point = $bullet_points[$bullet_point_id];

    $contains = FALSE;
    if (!empty($bullet_point->field_ref_attachment['und'])) {
        foreach ($bullet_point->field_ref_attachment['und'] as $ref_bullet_point_attachment) {
            if (intval($bilag_id) == intval($ref_bullet_point_attachment['target_id'])) {
                $contains = TRUE;
                break;
            }
        }
    }
    return $contains;
}

/**
 * Fetches the current user IP address.
 *
 * @return IP address
 */
function os2web_access_helper_get_client_ip() 
{
    $ipaddress = '';
    if (getenv('HTTP_CLIENT_IP'))
        $ipaddress = getenv('HTTP_CLIENT_IP');
    elseif (getenv('HTTP_X_FORWARDED_FOR'))
        $ipaddress = getenv('HTTP_X_FORWARDED_FOR');
    elseif (getenv('HTTP_X_FORWARDED'))
        $ipaddress = getenv('HTTP_X_FORWARDED');
    elseif (getenv('HTTP_FORWARDED_FOR'))
        $ipaddress = getenv('HTTP_FORWARDED_FOR');
    elseif (getenv('HTTP_FORWARDED'))
        $ipaddress = getenv('HTTP_FORWARDED');
    elseif (getenv('REMOTE_ADDR'))
        $ipaddress = getenv('REMOTE_ADDR');
    else
        $ipaddress = "UNKNOWN";

    return $ipaddress;
}

/**
 * Implements the hook_cron
 *
 * @return
 */
function os2web_access_helper_cron() 
{
    os2web_access_helper_delete_user_rights();
}

/**
 * Deletes all the user rights (is member of) if the right has expired.
 * The function will delete the connection to the member object, as well as the role object itself.
 *
 * @return
 */
function os2web_access_helper_delete_user_rights() 
{
    $users = db_select('users', 'u')
            ->fields('u', array('uid'))
            ->execute()
            ->fetchAll();

    foreach ($users as $user) {
        $full_user = user_load($user->uid);
        if (isset($full_user->field_user_positions['und'])) {
            foreach ($full_user->field_user_positions['und'] as $pos_index => $pos) {
                $pos_full = taxonomy_term_load($pos['tid']);
                if (isset($pos_full->field_user_pos_valid['und'])) {
                    $valid_until = strtotime($pos_full->field_user_pos_valid['und']['0']['value2']);
                    if (strtotime('now') > $valid_until) {
                        //deleting user connection to that committee (member of)
                        if (isset($full_user->field_user_committee['und'])) {
                            foreach ($full_user->field_user_committee['und'] as $com_index => $com) {
                                if ($com['tid'] == $pos_full->field_user_pos_committee['und']['0']['tid'])
                                    unset($full_user->field_user_committee['und'][$com_index]);
                            }
                        }

                        //deleting user connection to role
                        unset($full_user->field_user_positions['und'][$pos_index]);

                        user_save($full_user); //save changes
                        //deleting the role itself
                        taxonomy_term_delete($pos['tid']);
                    }
                }
            }
        }
    }
}