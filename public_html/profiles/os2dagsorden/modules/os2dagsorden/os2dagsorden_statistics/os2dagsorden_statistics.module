<?php

/**
 * @file
 * Code for the OS2dagsorden Statistics feature.
 */
include_once 'os2dagsorden_statistics.features.inc';

/**
 * Implementation of hook_menu()
 *
 * @return list of links
 */
function os2dagsorden_statistics_menu() {
  $items['admin/statistik'] = array(
    'title' => 'Statistik',
    'description' => 'Statistik',
    'access arguments' => array('administer os2web'),
    'page callback' => 'system_admin_menu_block_page',
    'file' => 'system.admin.inc',
    'file path' => drupal_get_path('module', 'system'),
    'type' => MENU_NORMAL_ITEM,
  );
  $items['admin/statistik/login_tracker'] = array(
    'title' => 'User login statistics',
    'description' => 'User login statistics',
    'page callback' => 'os2dagsorden_statistics_user_statistics_page',
    'access arguments' => array('administer os2web'),
    'type' => MENU_LOCAL_TASK,
  );

  $items['admin/statistik/login_tracker/%'] = array(
    'title' => 'User login statistics',
    'description' => 'User login statistics',
    'page callback' => 'os2dagsorden_statistics_user_statistics_by_year',
    'access arguments' => array('administer os2web'),
    'page arguments' => array(3),
    'type' => MENU_LOCAL_TASK,
  );

  $items['admin/statistik/content_views'] = array(
    'title' => 'Content views statistics',
    'description' => 'Statistic of content views',
    'page callback' => 'drupal_get_form',
    'page arguments' => array('os2dagsorden_statistics_content_views_search_form'),
    'access arguments' => array('administer os2web'),
    'type' => MENU_LOCAL_TASK,
  );
  $items['admin/statistik/content_views/%/%/%'] = array(
    'title' => 'Content views statistics',
    'description' => 'Statistic of content views',
    'page callback' => 'drupal_get_form',
    'page arguments' => array('os2dagsorden_statistics_content_views_node_statistic_form', 3, 4, 5),
    'access arguments' => array('administer os2web'),
  );
  return $items;
}

/**
 * Renders user statistics page output
 *
 * @return string
 */
function os2dagsorden_statistics_user_statistics_page() {
  $output = "<h3>" . t('User statistics') . "</h3>";

  $result = db_query('select  YEAR(FROM_UNIXTIME(login_timestamp)) as Year, count(*) as login from login_tracker group by  YEAR(FROM_UNIXTIME(login_timestamp))');
  if ($result) {
    foreach ($result as $row) {
      $items[] = l($row->Year . ' (' . $row->login . ') ', '/admin/statistik/login_tracker/' . $row->Year);
    }
    $output .= theme_item_list(array('items' => $items, 'type' => 'ul', 'attributes' => array()));
  }
  return $output;
}

/**
 * User statistics page output by year
 *
 * @param null $year
 * @return string
 */
function os2dagsorden_statistics_user_statistics_by_year($year = null) {
  $output = "<h3>" . t('User statistics by @year year', array('@year' => $year)) . "</h3>";
  $headers = array(
    array('data' => t('UID'), 'field' => 'uid'),
    array('data' => t('Username'), 'field' => 'name'),
    array('data' => t('login'), 'field' => 'login_timestamp', 'sort' => 'desc'));

  $query = db_select('login_tracker', 'lt');
  $query->innerJoin('users', 'u', 'lt.uid = u.uid');
  $query->fields('lt', array('uid', "login_timestamp"));
  $query->fields('u', array('name'));
  $query->where('YEAR(FROM_UNIXTIME(login_timestamp)) = :year', array(':year' => $year));
  $query->extend('TableSort') // Add table sort extender.
    ->orderByHeader($headers);
  $pager = $query->extend('PagerDefault')
    ->limit(100);

  $result = $pager->execute()
    ->fetchAllAssoc('uid');

  $rows = array();

  foreach ($result as $key => $row) {
    //$row->login_timestamp = date('d-m-Y H:i:s', $row->timestamp);
    $rows[$key]['uid'] = $row->uid;
    $rows[$key]['name'] = $row->name;
    $rows[$key]["login_timestamp"] = date('d-m-Y H:i:s', $row->login_timestamp);
  }


  $output .= theme('table', array('header' => $headers, 'rows' => $rows, 'attributes' => array('id' => 'sort-table')));
  $output .= theme('pager');


  return $output;
}

/**
 * Renders content statistics page output
 *
 * @return string
 */
function os2dagsorden_statistics_content_statistics_page() {
  $output = "<h1>Opgørelse over antal dagsordner og referater der er importeret til OS2dagsorden fordelt på antal år</h1>";
  $output .= '<div style="margin-top: 20px">
      <h3>Antal årlige dagsordener og referater</h3></div>';
  $result = db_query("select  YEAR(FROM_UNIXTIME(created)) as Year, count(*) as nodes from node  where type = 'os2web_meetings_meeting' group by  YEAR(FROM_UNIXTIME(created))");
  if ($result) {
    foreach ($result as $row) {
      $items[] = l($row->Year . ' (' . $row->nodes . ') ', '/admin/imported-content/' . $row->Year);
    };
    $output .= theme_item_list(array('items' => $items, 'type' => 'ul', 'attributes' => array()));
  }
  $output .= '<i>Antallet er angivet i parantes efter årstallet.</i>';
  return $output;
}

function os2dagsorden_statistics_content_statistics_by_year($year = null) {
  $output = "<h1>Opgørelse over antal dagsordner og referater der er importeret til OS2dagsorden fordelt på antal år</h1>";
  $output .= '<div style="margin-top: 20px">
      <h3>Antal årlige dagsordener og referater</h3></div>';
  $headers = array(
    array('data' => t('')),
    array('data' => t('Date'), 'field' => 'created'),
    array('data' => t('Updated'), 'field' => 'changed', 'sort' => 'desc'),
    array('data' => t('Name'), 'field' => 'name'));

  $query = db_select('node', 'n');
  $query->innerJoin('users', 'u', 'n.uid = u.uid');
  $query->fields('n', array('title', "created", 'changed', 'nid'));
  $query->fields('u', array('name'));
  $query->where('type = :type', array(':type' => "os2web_meetings_meeting"));
  $query->where('YEAR(FROM_UNIXTIME(n.created)) = :year', array(':year' => $year));
  $query->extend('TableSort') // Add table sort extender.
    ->orderByHeader($headers);
  $pager = $query->extend('PagerDefault')
    ->limit(100);

  $result = $pager->execute()
    ->fetchAllAssoc('nid');

  $rows = array();

  foreach ($result as $key => $row) {
    //$row->login_timestamp = date('d-m-Y H:i:s', $row->timestamp);
    $rows[$key]['title'] = l($row->title, '/node/' . $row->nid);
    $rows[$key]['created'] = date('d-m-Y H:i:s', $row->created);
    $rows[$key]["changed"] = date('d-m-Y H:i:s', $row->changed);
    $rows[$key]["name"] = $row->name == "" ? "Anonymous (not verified)" : l($row->name, '/user/' . $row->uid);
  }


  $output .= theme('table', array('header' => $headers, 'rows' => $rows, 'attributes' => array('id' => 'sort-table')));
  $output .= theme('pager');


  return $output;
}

/**
 * Implements hook_exit().
 *
 * Gathers statistics for content accesses.
 */
function os2dagsorden_statistics_page_build(&$page) {
  global $user;
  $url = parse_url($_SERVER['REQUEST_URI']);
  if (preg_match('#^/meeting/#', $url['path']) === 1) {
    $path_parts = explode('/', $url['path']);
    $meeting = node_load($path_parts[2]);
    $nid = array_pop($path_parts);
    $committee = field_get_items('node', $meeting, 'field_os2web_meetings_committee');
    db_insert('os2dagsorden_statistics_content_tracker')
      ->fields(array(
        'url' => isset($_SERVER['REQUEST_URI']) ? $_SERVER['REQUEST_URI'] : '',
        'uid' => $user->uid,
        'nid' => $nid,
        'committee' => $committee[0]['tid'],
        'timestamp' => REQUEST_TIME,
      ))
      ->execute();
  }
}

/**
 * Search form for content statistics
 *
 * @param $form
 * @param $form_state
 * @return mixed
 */
function os2dagsorden_statistics_content_views_search_form($form, $form_state) {
  drupal_add_css(drupal_get_path('module', 'os2dagsorden_statistics').'/css/os2dagsorden_statistics.css');
  drupal_set_title(t('Udvidet statistik på brug af OS2dagsorden'));
  $headers = array(
    //array('data' => t('')),
    'Title' => array('data' => t('Title')),
    'Committee' => array('data' => t('Committee'), 'field' => 'name'),
   // 'Date' => array('data' => t('Date'), 'field' => 'timestamp', 'sort' => 'desc'));
    'Views' => array('data' => t('Views count'), 'field' => 'views_count', 'sort' => 'desc'));

  $query = db_select('os2dagsorden_statistics_content_tracker', 't');
  $query->innerJoin('users', 'u', 't.uid = u.uid');
  $query->innerJoin('node', 'n', 't.nid = n.nid');
  $query->innerJoin('taxonomy_term_data',  'tt', 't.committee =  tt.tid');
  $query->fields('t', array('url', /* "uid", 'timestamp',*/ 'nid'));
  $query->fields('tt', array('name'));

  $search_params = array();
  if (!empty($_GET['title'])) {
    $search_params['title'] = $_GET['title'];
    $query->condition('n.title', '%' . $search_params['title'] . '%', 'like');
  }
  if (!empty($_GET['user'])) {
    $search_params['user'] = $_GET['user'];
    $query->condition('u.name', $search_params['user'], '=');
  }
  if (!empty($_GET['committes']) && $_GET['committes'] != 'all') {
    $search_params['committes'] = $_GET['committes'];
    $query->condition('t.committee', $search_params['committes'], '=');
  } else
    $search_params['committes'] = 'all';

  if (!empty($_GET['meetings']) && $_GET['meetings'] != 'all') {
    $search_params['meetings'] = $_GET['meetings'];
    $query->condition('t.url', '%/' . $search_params['meetings'] . '%', 'like');
  } else
     $search_params['meetings'] = 'all';

  if (!empty($_GET['bullet_points']) && $_GET['bullet_points'] != 'all') {
    $search_params['bullet_points'] = $_GET['bullet_points'];
    $query->condition('t.url', '%/' . $search_params['bullet_points'] . '%', 'like');
  }
  else
     $search_params['bullet_points'] = 'all';

  if (!empty($_GET['bpa']) && $_GET['bpa'] != 'all') {
    $search_params['bpa'] = $_GET['bpa'];
    $query->condition('t.url', '%/' . $search_params['bpa'] . '%', 'like');
  }

  if (!empty($_GET['date_from'])) {
    $search_params['date_from'] = strtotime(str_replace('/', '-', $_GET['date_from']) . '00:00:00');
    $query->condition('t.timestamp', $search_params['date_from'], '>=');
  }

  if (!empty($_GET['date_to'])) {
    $search_params['date_to'] = strtotime(str_replace('/', '-', $_GET['date_to']) . '23:59:59');
    $query->condition('t.timestamp', $search_params['date_to'], '<=');
  }
  $query->addExpression('count(t.nid)', 'views_count');
  $query->groupBy('t.nid');
  $query->extend('TableSort') // Add table sort extender.
    ->orderByHeader($headers);
  $pager = $query->extend('PagerDefault')
    ->limit(100);

  $result = $pager->execute()
    ->fetchAll();

  $options = array();
  foreach ($result as $key => $row) {
    $title = _os2dagsorden_statistics_get_full_title($row->url);
    $link = 'admin/statistik/content_views/' . $row->nid;
    $link .= isset($search_params['date_from']) ?  '/' . str_replace('/', '-', $_GET['date_from']) : '/all';
    $link .= isset($search_params['date_to']) ?  '/' . str_replace('/', '-', $_GET['date_to']) : '/all';
    $options[$key] = array('Title' => l($title, $row->url),
     'Committee' => $row->name,
     // "Date" => date('d-m-Y H:i:s', $row->timestamp)
     'Views' => l($row->views_count, $link)
    );
  }

  $form['search'] = array(
    '#type' => 'fieldset',
    '#title' => t('Basic Search'),
    '#collapsible' => TRUE,
    '#collapsed' => !empty($search_params) ? FALSE : TRUE,
    '#attributes' => array('class' => array('form-inline'))
  );

  $committes = _os2dagsorden_statistics_get_all_commitees('os2web_meetings_tax_committee');
  $selected_committee = isset($form_state['values']['committes']) ? $form_state['values']['committes'] : $search_params['committes'];
  $selected_meeting = isset($form_state['values']['meetings']) ? $form_state['values']['meetings'] : $search_params['meetings'];
  $selected_bp = isset($form_state['values']['bullet_points']) ? $form_state['values']['bullet_points'] : $search_params['bullet_points'];
  $form['search']['committes'] = array(
    '#type' => 'select',
    '#title' => t('Committes'),
    '#default_value' => $selected_committee,
    '#options' => $committes,
    '#ajax' => array(
      'callback' => 'os2dagsorden_statistics_ajax_display_dropdown_meetings_callback',
      'wrapper' => 'view-meeting-dropdown',
    ),
  );

  $form['search']['meetings'] = array(
    '#type' => 'select',
    '#title' => t('Meetings'),
    '#prefix' => '<div id="view-meeting-dropdown" class="form-item">',
    '#suffix' => '</div>',
    '#options' => _os2dagsorden_statistics_get_meetings_by_commitee($selected_committee),
    '#default_value' => isset($form_state['values']['meetings']) ? $form_state['values']['meetings'] : $search_params['meetings'],
    '#ajax' => array(
      'callback' => 'os2dagsorden_statistics_ajax_display_dropdown_bullet_points_callback',
      'wrapper' => 'view-bullet_points-dropdown',
    ),
  );
  $form['search']['bullet_points'] = array(
    '#type' => 'select',
    '#title' => t('Bullet Points'),
    '#prefix' => '<div id="view-bullet_points-dropdown" class="form-item">',
    '#suffix' => '</div>',
    '#options' => _os2dagsorden_statistics_get_bullet_points($selected_meeting),
    '#default_value' => isset($form_state['values']['bullet_points']) ? $form_state['values']['bullet_points'] : $search_params['bullet_points'],
    '#ajax' => array(
      'callback' => 'os2dagsorden_statistics_ajax_display_dropdown_bpa_callback',
      'wrapper' => 'view-bpa-dropdown',
    ),
  );
  $form['search']['bpa'] = array(
    '#type' => 'select',
    '#title' => t('Bullet Point Attachments'),
    '#prefix' => '<div id="view-bpa-dropdown" class="form-item">',
    '#suffix' => '</div>',
    '#options' => _os2dagsorden_statistics_get_bpa($selected_bp),
    '#default_value' => isset($form_state['values']['bpa']) ? $form_state['values']['bpa'] : $search_params['bpa'],
  );
  $form['search']['title'] = array(
    '#type' => 'textfield',
    '#title' => t('Title'),
    '#size' => 40,
    '#default_value' => !empty($search_params['title']) ? $search_params['title'] : '',
  );
  $form['search']['user'] = array(
    '#type' => 'textfield',
    '#title' => t('Username'),
    '#size' => 40,
    '#maxlength' => 60,
    '#autocomplete_path' => 'user/autocomplete',
    '#default_value' => $search_params['user'],
  );
  $form['search']['date'] = array(
    '#type' => 'fieldset',
    '#collapsible' => FALSE,
  );

  $form['search']['date']['date_from'] = array(
    '#type' => 'date_popup',
    '#title' => t('From'),
    '#date_format' => 'd/m/Y',
    '#date_year_range' => '-2:+0',
    '#default_value' => isset($search_params['date_from']) ? date("Y-m-d", $search_params['date_from']) : ""
  );
  $form['search']['date']['date_to'] = array(
    '#type' => 'date_popup',
    '#title' => t('To'),
    '#date_format' => 'd/m/Y',
    '#date_year_range' => '-2:+0',
    '#default_value' => isset($search_params['date_to']) ? date("Y-m-d", $search_params['date_to']) : "",
  );
  $form['search']['search_submit'] = array(
    '#type' => 'submit',
    '#value' => t('Search'),
  );
  $form['rows'] = array(
    '#type' => 'tableselect',
    '#header' => $headers,
    '#options' => $options,
    '#attributes' => array('class' => array('sort-table')),
    '#empty' => t('No content.'),
  );

  $form['pager'] = array('#theme' => 'pager');
  return $form;
}

/**
 * Form Submit method.
 */
function os2dagsorden_statistics_content_views_search_form_submit($form, &$form_state) {
  $values = $form_state['input'];
  $query = array(
    'title' => $values['title'],
    'committes' => $values['committes'],
    'user' => $values['user'],
    'meetings' => $values['meetings'],
    'bullet_points' => $values['bullet_points'],
    'bpa' => $values['bpa'],
    'date_from' => $values['date_from']['date'],
    'date_to' => $values['date_to']['date']
  );
  drupal_goto('admin/statistik/content_views', array('query' => $query));
}

/**
 * Return title in format meeting->bullet_point->bpa
 *
 * @param $url
 * @return string
 */
function _os2dagsorden_statistics_get_full_title($url) {
  $url_parts = parse_url($url);
  $path_parts = explode('/', $url_parts['path']);
  $meeting_date =  date('d/m/y H:i', strtotime(_os2dagsorden_statistics_get_meeting_date($path_parts[2])));
  $title = _os2dagsorden_statistics_get_node_title($path_parts[2]) . ' ' . $meeting_date;
  if (isset($path_parts[4]))
    $title .= ' -> ' . _os2dagsorden_statistics_get_node_title($path_parts[4]);
  if (isset($path_parts[6]))
    $title .= ' -> ' . _os2dagsorden_statistics_get_node_title($path_parts[6]);
  return $title;
}

/**
 * Helper function to get title based on node id
 *
 * @param $nid
 * @return mixed
 */
function _os2dagsorden_statistics_get_node_title($nid) {
  return db_query('SELECT title FROM {node} WHERE nid = :nid', array(':nid' => $nid))->fetchField();
}

/**
 * Helper function to get meeting date based on node id
 *
 * @param $nid
 * @return mixed
 */
function _os2dagsorden_statistics_get_meeting_date($nid) {
  return db_query('SELECT  field_os2web_meetings_date_value FROM {field_revision_field_os2web_meetings_date} WHERE entity_id = :nid', array(':nid' => $nid))->fetchField();
}

/**
 * Ajax callback to load meetings based on selected committee
 *
 * @param $form
 * @param $form_state
 * @return mixed
 */
function os2dagsorden_statistics_ajax_display_dropdown_meetings_callback($form, $form_state) {
  $commitee = $form_state['values']['committes'];
  $form['search']['meetings']['#options'] = _os2dagsorden_statistics_get_meetings_by_commitee($commitee);
  return $form['search']['meetings'];
}

/**
 * Ajax callback to load bulletpoint based on selected meeting
 *
 * @param $form
 * @param $form_state
 * @return mixed
 */
function os2dagsorden_statistics_ajax_display_dropdown_bullet_points_callback($form, $form_state) {
  $meetings = $form_state['values']['meetings'];
  $form['search']['bullet_points']['#options'] = _os2dagsorden_statistics_get_bullet_points($meetings);
  return $form['search']['bullet_points'];
}

/**
 * Ajax callback to load BPA based on selected bullet point
 *
 * @param $form
 * @param $form_state
 * @return mixed
 */
function os2dagsorden_statistics_ajax_display_dropdown_bpa_callback($form, $form_state) {
  $bullet_point = $form_state['values']['bullet_points'];
  $form['search']['bpa']['#options'] = _os2dagsorden_statistics_get_bpa($bullet_point );
  return $form['search']['bpa'];
}

/**
 * Returns list of meetings based on provided committee term
 *
 * @param $commitee
 * @return array
 */
function _os2dagsorden_statistics_get_meetings_by_commitee($commitee) {
  $meetings = array('all' => t('All'));
  if ($commitee == 'all')
    return $meetings;

  $query = new EntityFieldQuery();
  $query->entityCondition('entity_type', 'node')
    ->entityCondition('bundle', 'os2web_meetings_meeting')
    ->fieldCondition('field_os2web_meetings_committee', 'tid', $commitee, '=')
    ->propertyOrderBy('title', 'ASC');

  $result = $query->execute();

  if (isset($result['node'])) {
    $meetings_items_nids = array_keys($result['node']);
    $meetings_items = entity_load('node', $meetings_items_nids);
    foreach ($meetings_items as $nid => $node)
      $meetings[$nid] = $node->title . ' ' . date('d/m/y H:i', strtotime($node->field_os2web_meetings_date['und'][0]['value']));
  }
  return $meetings;
}

/**
 * Return all bullet_points of meeting
 *
 * @param $meeting_nid
 * @return array
 */
function _os2dagsorden_statistics_get_bullet_points($meeting_nid) {
  $bullet_points_list = array('all' => t('All'));
  if ($meeting_nid == 'all' || !isset($meeting_nid))
    return $bullet_points_list;
  $meeting = node_load($meeting_nid);
  $bullet_points = field_get_items('node', $meeting, 'field_os2web_meetings_bullets');
  foreach ($bullet_points as $value) {
    $bullet_points_list[$value['target_id']] = _os2dagsorden_statistics_get_node_title($value['target_id']);
  }
  return $bullet_points_list;
}

/**
 * Return all bpa of bullet point
 *
 * @param $bullet_point_nid
 * @return array
 */
function _os2dagsorden_statistics_get_bpa($bullet_point_nid) {
  $bpa_list = array('all' => t('All'));
  if ($bullet_point_nid == 'all' || !isset($bullet_point_nid))
    return $bpa_list;
  $bullet_point = node_load($bullet_point_nid);
  $bpa = field_get_items('node', $bullet_point, 'field_os2web_meetings_attach');
  foreach ($bpa as $value) {
    $bpa_list[$value['target_id']] = _os2dagsorden_statistics_get_node_title($value['target_id']);
  }
  return $bpa_list;
}

/**
 * Returns list of committees that are active
 *
 * @param $vocabulary
 * @return array
 */
function _os2dagsorden_statistics_get_all_commitees($vocabulary) {
  $vocabulary = taxonomy_vocabulary_machine_name_load($vocabulary);
  $terms_list = array('all' => t('All'));
  $query = new EntityFieldQuery();
  $result = $query->entityCondition('entity_type', 'taxonomy_term')
    ->propertyCondition('vid', $vocabulary->vid)
    ->propertyOrderBy('name')
    ->execute();
  if (!empty($result['taxonomy_term'])) {
    $terms = taxonomy_term_load_multiple(array_keys($result['taxonomy_term']));
    foreach ($terms as $term) {
      if (isset($term->field_os2web_meetings_com_active['und']) && $term->field_os2web_meetings_com_active['und'][0]['value'])
        $terms_list[$term->tid] = $term->name;
    }
  }
  return $terms_list;
}

/**
 * Advanced statistics for node view
 *
 * @param $form
 * @param $form_state
 * @param $nid
 * @param $date_from
 * @param $date_to
 * @return mixed
 */
function os2dagsorden_statistics_content_views_node_statistic_form($form, $form_state, $nid, $date_from, $date_to){
  drupal_set_title(t('Udvidet statistik på brug af OS2dagsorden'));
  $headers = array(
    'Title' => array('data' => t('Title')),
    'User' => array('data' => t('User'), 'field' => 'u.name'),
    'Views' => array('data' => t('Views count'), 'field' => 'views_count', 'sort' => 'desc'));

  $form['search'] = array(
    '#type' => 'fieldset',
    '#title' => t('Search'),
  );
  $search_params = array();
  $query = db_select('os2dagsorden_statistics_content_tracker', 't');
  $query->innerJoin('users', 'u', 't.uid = u.uid');
  $query->innerJoin('node', 'n', 't.nid = n.nid');
  $query->fields('t', array('url', "uid", /*'timestamp',*/ 'nid'));
  $query->fields('u', array('name'));
  $query->addExpression('count(t.nid)', 'views_count');
  $query->groupBy('t.uid');
  if ($date_from != 'all') {
    $query->condition('t.timestamp', strtotime($date_from . '00:00:00'), '>=');
  }

  if ($date_to != 'all') {
   $query->condition('t.timestamp', strtotime($date_to . '23:59:59'), '<=');
  }
  $query->condition('t.nid', $nid, '=');
  $query->extend('TableSort') // Add table sort extender.
    ->orderByHeader($headers);
  $pager = $query->extend('PagerDefault')
    ->limit(100);

  $result = $pager->execute()
    ->fetchAll();

  $options = array();
  foreach ($result as $key => $row) {
    $title = _os2dagsorden_statistics_get_full_title($row->url);
    $options[$key] = array('Title' => l($title, $row->url),
      'User' => $row->name == "" ? "Anonymous (not verified)" : l($row->name, '/user/' . $row->uid),
      'Views' => $row->views_count
    );
  }

  $form['search']['nid'] = array(
    '#type' => 'hidden',
    '#default_value' =>  $nid
  );
  $form['search']['date_from'] = array(
    '#type' => 'date_popup',
    '#title' => t('From'),
    '#date_format' => 'd/m/Y',
    '#date_year_range' => '-2:+0',
    '#default_value' =>  isset($date_from) && strtotime($date_from) ? date("Y-m-d", strtotime($date_from)) : ""
  );
  $form['search']['date_to'] = array(
    '#type' => 'date_popup',
    '#title' => t('To'),
    '#date_format' => 'd/m/Y',
    '#date_year_range' => '-2:+0',
    '#default_value' => isset($date_to) && strtotime($date_to) ? date("Y-m-d", strtotime($date_to)) : "",
  );
  $form['search']['search_submit'] = array(
    '#type' => 'submit',
    '#value' => t('Search'),
  );
  $form['rows'] = array(
    '#type' => 'tableselect',
    '#header' => $headers,
    '#options' => $options,
    '#attributes' => array('class' => array('sort-table')),
    '#empty' => t('No content.'),
  );

  $form['pager'] = array('#theme' => 'pager');
  return $form;
}

/**
 * Form Submit method.
 *
 * @param $form
 * @param $form_state
 */
function os2dagsorden_statistics_content_views_node_statistic_form_submit($form, &$form_state) {
  $values = $form_state['input'];
  $date_from = isset($values['date_from']['date']) && !empty($values['date_from']['date']) ? str_replace('/', '-', $values['date_from']['date']) : 'all';
  $date_to = isset($values['date_to']['date']) && !empty($values['date_to']['date']) ? str_replace('/', '-', $values['date_to']['date']) : 'all';

  drupal_goto('admin/statistik/content_views/' . $values['nid'] . '/' . $date_from . '/' . $date_to);
}