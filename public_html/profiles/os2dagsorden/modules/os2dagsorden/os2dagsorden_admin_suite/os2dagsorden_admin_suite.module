<?php

/**
 * Implementation of hook_menu
 *
 * @return list of links
 */
function os2dagsorden_admin_suite_menu() {
    $items = array();

    $items['os2dagsorden/admin_suite/update_files_path'] = array(
        'type' => MENU_CALLBACK,
        'page callback' => 'os2dagsorden_admin_suite_update_files_path',
        'access arguments' => array('administer os2web'),
    );

    $items['os2dagsorden/admin_suite/set_bullet_point_number'] = array(
        'type' => MENU_CALLBACK,
        'page callback' => 'os2dagsorden_admin_suite_set_bullet_point_number',
        'access arguments' => array('administer os2web'),
    );

    $items['os2dagsorden/admin_suite/update_meeting_status'] = array(
        'type' => MENU_CALLBACK,
        'page callback' => 'os2dagsorden_admin_suite_update_meeting_status',
        'access arguments' => array('administer os2web'),
    );

    $items['os2dagsorden/admin_suite/force_meeting_description_converting'] = array(
        'type' => MENU_CALLBACK,
        'page callback' => 'os2dagsorden_admin_suite_force_meeting_description_converting',
        'access arguments' => array('administer os2web'),
    );

    $items['os2dagsorden/admin_suite/delete_converted_files'] = array(
        'type' => MENU_CALLBACK,
        'page callback' => 'os2dagsorden_admin_suite_delete_converted_files',
        'access arguments' => array('administer os2web'),
    );

    $items['os2dagsorden/admin_suite/delete_extra_files'] = array(
        'type' => MENU_CALLBACK,
        'page callback' => 'os2dagsorden_admin_suite_delete_extra_files',
        'access arguments' => array('administer os2web'),
    );

    $items['os2dagsorden/admin_suite/delete_unused_files'] = array(
        'type' => MENU_CALLBACK,
        'page callback' => 'os2dagsorden_admin_suite_delete_unused_files',
        'access arguments' => array('administer os2web'),
    );

    $items['os2dagsorden/admin_suite/calc_damaged_meetings'] = array(
        'type' => MENU_CALLBACK,
        'page callback' => 'os2dagsorden_admin_suite_calculate_damaged_meetings',
        'access arguments' => array('administer os2web'),
    );

    $items['os2dagsorden/admin_suite/resave_all_meetings'] = array(
        'type' => MENU_CALLBACK,
        'page callback' => 'os2dagsorden_admin_suite_resaved_all_meetings',
        'access arguments' => array('administer os2web'),
    );

    $items['os2dagsorden/admin_suite/update_meetings_sysid'] = array(
        'type' => MENU_CALLBACK,
        'page callback' => 'os2dagsorden_admin_suite_update_meetings_sysid',
        'access arguments' => array('administer os2web'),
    );

    $items['os2dagsorden/check_meeting_category_assignment/%/%'] = array(
        'type' => MENU_CALLBACK,
        'page callback' => 'os2dagsorden_esdh_provider_assign_meeting_category',
        'access arguments' => array('administer os2web'),
	'page arguments' => array(2,3),
    );

    $items['os2dagsorden/check_dblog'] = array(
        'type' => MENU_CALLBACK,
        'page callback' => 'os2dagsorden_admin_suite_check_dblog',
        'access arguments' => array('administer os2web'),
    );
    $items['os2dagsorden/admin_suite/add_meeting_files'] = array(
        'type' => MENU_CALLBACK,
        'page callback' => 'os2dagsorden_admin_suite_add_meeting_files',
        'access arguments' => array('administer os2web'),

    );
     $items['os2dagsorden/admin_suite/update_meetings_type'] = array(
        'type' => MENU_CALLBACK,
        'page callback' => 'os2dagsorden_admin_suite_update_meetings_type',
        'access arguments' => array('administer os2web'),

    );

    $items['os2dagsorden/admin_suite/user_remove_org_meetings_category'] = array(
        'type' => MENU_CALLBACK,
        'page callback' => 'os2dagsorden_admin_suite_user_remove_org_meetings_category',
        'access arguments' => array('administer os2web'),

    );

     $items['os2dagsorden/admin_suite/user_can_send_closed_bp/%'] = array(
        'type' => MENU_CALLBACK,
        'page callback' => 'os2dagsorden_admin_suite_user_forbid_send_closed_bp',
        'access arguments' => array('administer os2web'),
         'page arguments' => array(3)

    );

    $items['os2dagsorden/admin_suite/reschedule_adlib'] = array(
        'type' => MENU_CALLBACK,
        'page callback' => 'os2dasorden_admin_suite_reschedule_file_adlib',
        'access arguments' => array('administer os2web'),
    );

    $items['os2dagsorden/admin_suite/add_committee_to_users'] = array(
	'type' => MENU_CALLBACK,
        'page callback' => 'os2dasorden_admin_suite_add_committee_to_users',
        'access arguments' => array('administer os2web'),
    );

    $items['os2dagsorden/admin_suite/update_ldap_users'] = array(
        'type' => MENU_CALLBACK,
        'page callback' => 'os2dasorden_admin_suite_update_ldap_users',
        'access arguments' => array('administer os2web'),
    );

    $items['os2dagsorden/admin_suite/just_code'] = array(
        'type' => MENU_CALLBACK,
        'page callback' => 'os2dasorden_admin_suite_just_code',
        'access arguments' => array('administer os2web'),
    );

    return $items;
}

function os2dasorden_admin_suite_add_committee_to_users(){
    $query = new EntityFieldQuery();
    $result = $query->entityCondition('entity_type', 'user')
       ->execute();
    $users = user_load_multiple(array_keys($result['user']));

    //$add_to_user = array("cksi", "jmhr", "ldkl", "anmc", "pst",	"joth");
    $add_to_user = array("crb","casc","clst","gepe","hlbc","hdl","idva","lsej","lec","lkda","loal","lost","mb","mkbd","nnbs",
"pib","siro","ski","sole","susp","trsj","vrt","ahrjc","capo","giso","havh","jrst","jp","llv","mico","rjen","aj","anlt","birth",
"doaje","jda","jvh","juel","kbau","lrl","liwh","lispb","ld","msv","npth","nmp","pisk","sibr","stsa","trmd","toh","anej","bci",
"bd","bab","bsl","biwn","cfj","iso","kbn","krb","krvj","lehen","malth","nidj","kal","kbay");

    //$committees_to_add = array(558, 560, 559);
    $committee_to_add = 558;

    foreach($users as $user){
	if (in_array($user->name, $add_to_user)){
	    $contains = FALSE;
	    if (isset($user->field_follows_committee_pp['und'])){
		foreach($user->field_follows_committee_pp['und'] as $com){
		    if ($committee_to_add == $com['tid']){
			$contains = TRUE;
		    }
		}
	    }
	    if (!$contains) {
		$user->field_follows_committee_pp['und'][]['tid'] = $committee_to_add;
	    }
	    print_r($user->name . ' ');
	    print_r($user->field_follows_committee_pp);
	    user_save($user);
	    print_r("<br/><br/>");
	}
    }
}

 function os2dagsorden_admin_suite_user_remove_org_meetings_category(){
    $query = new EntityFieldQuery();
    $result = $query->entityCondition('entity_type', 'user')
       ->execute();
    $users = user_load_multiple(array_keys($result['user']));
    $new_com_id = 521;
    $old_com_ids = array(543);

    foreach($users as $user){
	print("<br/><br/>");
	$changed = FALSE;
	if (isset($user->field_user_committee['und'])){
	    print("MEMBER: ");
	    print_r($user->field_user_committee['und']);
	    for ($i = 0; $i <= sizeof($user->field_user_committee['und']); $i++) {
		if (in_array($user->field_user_committee['und'][$i]['tid'], $old_com_ids)){
		    $user->field_user_committee['und'][$i]['tid'] = $new_com_id;
		    $changed = TRUE;
		}
	    }
	    print("<br/>NEW MEMBER: ");
	    print_r($user->field_user_committee['und']);
	}
	if (isset($user->field_follows_committee['und'])){
	    print("<br/>");
	    print("<br/>");
	    print("FOLLOWS: ");
	    print_r($user->field_follows_committee['und']);
	    for ($i = 0; $i <= sizeof($user->field_follows_committee['und']); $i++) {
		if (in_array($user->field_follows_committee['und'][$i]['tid'], $old_com_ids)){
		    $user->field_follows_committee['und'][$i]['tid'] = $new_com_id;
		    $changed = TRUE;
		}
	    }
	    print("<br/>NEW FOLLOWS: ");
	    print_r($user->field_follows_committee['und']);
	}
	if (isset($user->field_follows_committee_plus['und'])){
	    print("<br/>");
	    print("FOLLOWS PLUS: ");
	    print_r($user->field_follows_committee_plus['und']);
	    for ($i = 0; $i <= sizeof($user->field_follows_committee_plus['und']); $i++) {
		if (in_array($user->field_follows_committee_plus['und'][$i]['tid'], $old_com_ids)){
		    $user->field_follows_committee_plus['und'][$i]['tid'] = $new_com_id;
		    $changed = TRUE;
		}
	    }
	    print("<br/>NEW FOLLOWS PLUS: ");
	    print_r($user->field_follows_committee_plus['und']);
	}
	if (isset($user->field_follows_committee_pp['und'])){
	    print("<br/>");
	    print("FOLLOWS PLUS PLUS: ");
	    print_r($user->field_follows_committee_pp['und']);
	    for ($i = 0; $i <= sizeof($user->field_follows_committee_pp['und']); $i++) {
		if (in_array($user->field_follows_committee_pp['und'][$i]['tid'], $old_com_ids)){
		    $user->field_follows_committee_pp['und'][$i]['tid'] = $new_com_id;
		    $changed = TRUE;
		}
	    }
	    print("<br/>NEW FOLLOWS PLUS PLUS: ");
	    print_r($user->field_follows_committee_pp['und']);
	}
	if ($changed){
	    print("CHANGED");
	    //user_save($user);
	} else {
	    print("NOT CHANGED");
	}
    }
 }

function os2dagsorden_admin_suite_update_meetings_sysid(){
  $meetings = os2web_esdh_provider_invoke('mm', 'get_import_list');
  foreach ($meetings as $meeting_id){
    //print_r($meeting_id);
    $meeting_versions = os2web_esdh_provider_invoke('mm', 'import_meeting', $meeting_id);
    foreach ($meeting_versions as $meeting_version){
      //trying to get meeting from id
      $query = new EntityFieldQuery();
      $query->entityCondition('entity_type', 'node')
	  ->fieldCondition('field_meeting_acadre_id', 'value', $meeting_id['id'], '=');

      $result = $query->execute();
      if (isset($result['node'])) {
	  $nids = array_keys($result['node']);
	  $node = reset(entity_load('node', $nids));
      }
      else {//if fails, trying to get meeting from date and committe combination. Assuming this is unique
	  //getting committee tid
	  $vid = db_select('taxonomy_vocabulary', 'tv')->fields('tv', array('vid'))->condition('machine_name', 'os2web_meetings_tax_committee')->execute()->fetchField();

	  $query = new EntityFieldQuery();
	  $query->entityCondition('entity_type', 'taxonomy_term')
	      ->propertyCondition('vid', $vid)
	      ->fieldCondition('field_os2web_meetings_com_subid', 'value', $meeting_version['committee_id'], '=');

	  $result = $query->execute();
	  if (isset($result['taxonomy_term'])) {
	      $tids = array_keys($result['taxonomy_term']);
	      $com_tid = reset($tids);
	  }

	  //getting meeting
	  $meeting_start_date_0000 = date('Y-m-d 00:00:00', strtotime($meeting_version['meeting_date_start']));
	  $meeting_start_date_2359 = date('Y-m-d 23:59:59', strtotime($meeting_version['meeting_date_start']));

	  $query = new EntityFieldQuery();
	  $query->entityCondition('entity_type', 'node')
	      ->fieldCondition('field_os2web_meetings_date', 'value', $meeting_start_date_0000, '>=')
	      ->fieldCondition('field_os2web_meetings_date', 'value', $meeting_start_date_2359, '<=')
	      ->fieldCondition('field_os2web_meetings_committee', 'tid', $com_tid, '=');
	  $result = $query->execute();

	  if (isset($result['node'])) {
	      $nids = array_keys($result['node']);
	      $node = reset(entity_load('node', $nids));
	  }
	  else {//if fails, creating a new meeting
	      print_r('could not be found: ' . $meeting_id['id']);
	      print_r("<br/>");
	  }
      }
      //if (!empty($node->field_meeting_sysid['und'][0]))//break if already filled
	//continue;

      //setting sysid
      $node->field_meeting_sysid['und'][0]['value'] = $meeting_version['meeting_id'];

      $contains_acadre_version = FALSE;
      //updating acadre versions
      if (isset($node->field_meeting_acadre_version['und'])){
	foreach($node->field_meeting_acadre_version['und'] as $field){
	  //print_r($field);
	  //print_r($meeting_version['acadre_version']);
	  if (strcmp($field['value'], $meeting_version['acadre_version']) == 0){
	    $contains_acadre_version = TRUE;
	    break;
	  }
	}
      }

      if (!$contains_acadre_version){
	$node->field_meeting_acadre_version['und'][]['value'] = $meeting_version['acadre_version'];
      }

      print_r("Found nid: " . $node->nid);
      print_r("<br/>");
      //print_r($node);
      print_r("<br/>");

      node_save($node);
    }
  }
}

/**
 * Function to resave all the meetings.
 * That will update the meetings meta data field (user for the search)
 */
function os2dagsorden_admin_suite_resaved_all_meetings(){
    $new_com_id = 521;
    $old_com_ids = array(543);

  $query = new EntityFieldQuery();
  $query->entityCondition('entity_type', 'node')
    ->propertyCondition('type', array('os2web_meetings_meeting'))
    ->fieldCondition('field_os2web_meetings_committee', 'tid', $old_com_ids, 'IN');

  $result = $query->execute();
  if (isset($result['node'])) {
    $nids = array_keys($result['node']);
    foreach ($nids as $nid){
	$meeting = node_load($nid);
	print('<br/><br/>');
	print($nid);
	print('<br/>OLD COM ID: ');
	print($meeting->field_os2web_meetings_committee['und'][0]['tid']);
	$meeting->field_os2web_meetings_committee['und'][0]['tid'] = $new_com_id;
	print('<br/>NEW COM ID: ');
	print($meeting->field_os2web_meetings_committee['und'][0]['tid']);
	//node_save($meeting);
    }
  }

}

function os2dagsorden_admin_suite_calculate_damaged_meetings(){
  $query = new EntityFieldQuery();
  $query->entityCondition('entity_type', 'node')
      ->propertyCondition('type', array('os2web_meetings_meeting'))
      ->fieldCondition('field_meeting_acadre_id', 'value', '', '!=');

  $result = $query->execute();

  if (isset($result['node'])) {
    $nids = array_keys($result['node']);
    foreach ($nids as $nid){
      $meeting = node_load($nid);
      foreach ($meeting->field_os2web_meetings_bullets['und'] as $bullet_point) {
	  $bp = node_load($bullet_point['target_id']);
	  if (empty($bp)){
	    print_r($meeting->field_meeting_acadre_id['und'][0]['value']);
	    print_r("<br/>");
	    continue;
	  }
      }
    }
  }
}

/**
  * Forces the file deletion of thos file that were successfully conveted to PDF.
  *
  * @return none
  */
function os2dagsorden_admin_suite_delete_converted_files(){
  $acadre_dir =  drupal_realpath("private://");
  $dirs = scandir($acadre_dir);
  foreach ($dirs as $dir){
    if (preg_match("/^Files/i",$dir)){
      print_r($dir . "<br/>");
      $files = scandir($acadre_dir . '/' . $dir);

      $not_pdf_files = array();
      $pdf_files = array();
      foreach ($files as $file){
	if ($file === '.' || $file === '..') continue;

	if (!preg_match("/\.xml$/i",$file) && !preg_match("/\.html$/i",$file) && !preg_match("/\.pdf$/i",$file)){//not xml, pdf or html
	  $not_pdf_files[] = $file;
	} else if (preg_match("/\.pdf$/i",$file)){
	  $pdf_files[] = $file;
	}
      }

      //going through not pdf files, to decide which to delete
      $files_to_delete = array();
      foreach ($not_pdf_files as $not_pdf_file){
	$file_name = explode(".",$not_pdf_file);
	if (preg_grep("/^" . $file_name[0] . "/i",$pdf_files)){//case insensitive array_contains
	    //$files_to_delete[] = $acadre_dir . '/' . $dir . '/' . $not_pdf_file;
	    $files_to_delete[] = $not_pdf_file;
	}
      }

      //deleting file
      foreach ($files_to_delete as $file){
	unlink($acadre_dir . '/' . $dir . '/' . $file);
      }
      print_r('not pdf files: ');
      print_r($not_pdf_files);
      print_r("<br/>");
      print_r('pdf files: ');
      print_r($pdf_files);
      print_r("<br/>");
      print_r('to be deleted: ');
      print_r($files_to_delete);
      print_r("<br/>");
      print_r("<br/>");
      print_r("<br/>");
    }
  }
}

/**
  * Deletes the extra files from the acadre directory, which are copied together with the new acadre version but are never used
  *
  * @return none
  */
function os2dagsorden_admin_suite_delete_extra_files(){
    $to_delete = array();

    $results = db_query("SELECT * FROM file_managed WHERE filename LIKE '%.doc'
		    OR filename like '%.docx'
		    OR filename like '%.xls'
		    OR filename like '%.xlsx'
		    OR filename like '%.ppt'
		    OR filename like '%.pptx'
		    OR filename like '%.tif'
		    OR filename like '%.msg'
		    OR filename like '%.jpg'
		    OR filename like '%.rtf'
		    OR filename like '%.docm'
		    OR filename like '%.mpp'
		    OR filename like '%.tiff'
		    OR filename like '%.txt'
		    OR filename like '%.pdf'");

    while ($file = $results->fetchAssoc()){
      print_r($file);
      print_r("<br/>");

      //checking bullet point
      $query = new EntityFieldQuery();
      $query->entityCondition('entity_type', 'node')
        ->fieldCondition('field_os2web_meetings_bpa_file', 'fid', $file['fid'], '=');
      $bpa = $query->execute();
      if (isset($bpa['node'])) {
	  continue;
      }

      //checking meeting description closed
      $query = new EntityFieldQuery();
      $query->entityCondition('entity_type', 'node')
        ->fieldCondition('field_os2web_meetings_full_doc_c', 'fid', $file['fid'], '=');
      $meeting = $query->execute();
      if (isset($meeting['node'])) {
	  continue;
      }

      //checking meeting description opened
      $query = new EntityFieldQuery();
      $query->entityCondition('entity_type', 'node')
        ->fieldCondition('field_os2web_meetings_full_doc', 'fid', $file['fid'], '=');
      $meeting = $query->execute();
      if (isset($meeting['node'])) {
	  continue;
      }

      //not used anywhere
      $to_delete[] = $file;
    }
    print_r("<br/>");
    print_r("<br/>");
    print_r("<br/>");
    print_r('to be deleted:');
    foreach ($to_delete as $file){
      file_delete(file_load($file['fid']));
      print_r($file);
      print_r("<br/>");
    }
    print_r("<br/>");
    print_r("<br/>");
    print_r("<br/>");
}

/**
  * Deletes the files from acadre dir (not xml or pdf) that are not used by dagsorden.
  *
  * @return none
  */
function os2dagsorden_admin_suite_delete_unused_files(){
    //$acadre_dir =  drupal_realpath("private://");
    $acadre_dir =  drupal_realpath(variable_get('os2web_meetings_path', ACADRE_MM_IMPORT_DIR));
    $count = 0;
   $dirs = scandir($acadre_dir);
    foreach ($dirs as $dir){
      if (preg_match("/^Files/i",$dir)){
	print_r($dir . "<br/>");
	$files = scandir($acadre_dir . '/' . $dir);

	$not_pdf_files = array();
	foreach ($files as $file){
	  if ($file === '.' || $file === '..') continue;

	  if (!preg_match("/\.xml$/i",$file)){// && !preg_match("/\.html$/i",$file) && !preg_match("/\.pdf$/i",$file)){//not xml, pdf or html
	    $not_pdf_files[] = $file;
	  }
	}
	//going through not pdf files, to decide which to delete
	$files_to_delete = array();
	foreach ($not_pdf_files as $not_pdf_file){
	  $result = db_query("SELECT COUNT(*) FROM file_managed WHERE filename ='" . mysql_real_escape_string($not_pdf_file) . "'")->fetchField();
	  if ($result == 0 && !is_numeric(substr(basename($not_pdf_file),0,1))) {
	    $files_to_delete[] = $not_pdf_file;
	  }
	}

	//deleting file
        if (isset($files_to_delete) && !empty($files_to_delete)){
           $count++;
	foreach ($files_to_delete as $file){
	  unlink($acadre_dir . '/' . $dir . '/' . $file);
	}
        }
        /*

	print_r('not pdf files: ');
	print_r($not_pdf_files);
	print_r("<br/>");
	print_r('pdf files: ');
	print_r($pdf_files);
	print_r("<br/>");
	print_r('to be deleted: ');
	print_r($files_to_delete);
	print_r("<br/>");
	print_r("<br/>");
	print_r("<br/>");
       */
      }
      //if ($count>=100) return;
    }
}

/**
  * Forces the meeting description files to be converted to pdf.
  *
  * @return none
  */
function os2dagsorden_admin_suite_force_meeting_description_converting(){
    $nodes = entity_load('node', FALSE, array('type' => 'os2web_meetings_meeting'));
    foreach ($nodes as $node){
      if (isset($node->field_os2web_meetings_full_doc[$node->language][0])){
	$file = $node->field_os2web_meetings_full_doc[$node->language][0];
	$ext = explode('.', $file['filename']);
	print_r('OPENED: nid[' . $node->nid . '] fid[' . $file['fid'] . '] type[' . $file['filename'] . '] ext[' . $ext[1] . ']');
	print_r("<br/>");
	if (strcasecmp($ext[1], 'PDF') != 0){
	  print_r("conversion scheduled");
	  os2dagsorden_adlib_api_convert_to_pdf($file['fid'], $node->nid);
	}
	print_r("<br/><br/>");
      }
      if (isset($node->field_os2web_meetings_full_doc_c[$node->language][0])){
	$file = $node->field_os2web_meetings_full_doc_c[$node->language][0];
	$ext = explode('.', $file['filename']);
	print_r('CLOSED: nid[' . $node->nid . '] fid[' . $file['fid'] . '] type[' . $file['filename'] . '] ext[' . $ext[1] . ']');
	print_r("<br/>");
	if (strcasecmp($ext[1], 'PDF') != 0){
	  print_r("conversion scheduled");
	  os2dagsorden_adlib_api_convert_to_pdf($file['fid'], $node->nid);
	}
	print_r("<br/><br/>");
      }
    }
}

/**
  * Updates the meeting statuses to dagsorden/dagsorden+, referat/referat+
  * also sets the right acadre id to the meeting
  *
  * @return none
  */
function os2dagsorden_admin_suite_update_meeting_status(){
    $meetings = os2web_esdh_provider_invoke('mm', 'get_import_list');
    foreach ($meetings as $meeting){
      $versions = os2web_esdh_provider_invoke('mm', 'import_meeting', $meeting);
      foreach ($versions as $version){
	$type = $version['type'];
	print_r($version['committee_id']);
	print_r("<br/>");
      }

      $last_ver = end($versions);

      //trying to get meeting from id
      $query = new EntityFieldQuery();
      $query->entityCondition('entity_type', 'node')
	  ->fieldCondition('field_meeting_acadre_id', 'value', $meeting['id'], '=');

      $result = $query->execute();
      if (isset($result['node'])) {
	  $nids = array_keys($result['node']);
	  $node = reset(entity_load('node', $nids));
      }
      else {//if fails, trying to get meeting from date and committe combination. Assuming this is unique
	  //getting committee tid
	  $vid = db_select('taxonomy_vocabulary', 'tv')->fields('tv', array('vid'))->condition('machine_name', 'os2web_meetings_tax_committee')->execute()->fetchField();

	  $query = new EntityFieldQuery();
	  $query->entityCondition('entity_type', 'taxonomy_term')
	      ->propertyCondition('vid', $vid)
	      ->fieldCondition('field_os2web_meetings_com_subid', 'value', $last_ver['committee_id'], '=');

	  $result = $query->execute();
	  if (isset($result['taxonomy_term'])) {
	      $tids = array_keys($result['taxonomy_term']);
	      $com_tid = reset($tids);
	  }

	  //getting meeting
	  $meeting_start_date_0000 = date('Y-m-d 00:00:00', strtotime($last_ver['meeting_date_start']));
	  $meeting_start_date_2359 = date('Y-m-d 23:59:59', strtotime($last_ver['meeting_date_start']));

	  $query = new EntityFieldQuery();
	  $query->entityCondition('entity_type', 'node')
	      ->fieldCondition('field_os2web_meetings_date', 'value', $meeting_start_date_0000, '>=')
	      ->fieldCondition('field_os2web_meetings_date', 'value', $meeting_start_date_2359, '<=')
	      ->fieldCondition('field_os2web_meetings_committee', 'tid', $com_tid, '=');
	  $result = $query->execute();

	  if (isset($result['node'])) {
	      $nids = array_keys($result['node']);
	      $node = reset(entity_load('node', $nids));
	  }
	  else {
	      print_r('FAILED: meeting id[' . $meeting['id'] . '] NOT FOUND');
	      print_r("<br/>");
	      print_r("<br/>");
	      continue;
	  }
      }

      $node->field_meeting_acadre_id[LANGUAGE_NONE][0]['value'] = $meeting['id'];

      if (strcmp($type, 'Dagsorden') == 0){//is dagsorden
	if (os2dagsorden_access_helper_meeting_fully_converted($node))//everything is converted
	  os2dagsorden_access_helper_set_meeting_status_and_save($node, 'Dagsorden+');
	else
	  os2dagsorden_access_helper_set_meeting_status_and_save($node, 'Dagsorden');
      }
      else {//is is referat
	if (os2dagsorden_access_helper_meeting_fully_converted($node))//everything is converted
	  os2dagsorden_access_helper_set_meeting_status_and_save($node, 'Referat+');
	else
	  os2dagsorden_access_helper_set_meeting_status_and_save($node, 'Referat');
      }

      print_r('DONE: nid[' . $node->nid . '] meeting id[' . $meeting['id'] . '] - ' . $node->field_os2web_meetings_type['und'][0]['value']);
      print_r("<br/>");
      print_r("<br/>");
    }
}

/**
  * Sets the bullet point number from the bullet point title, assuming that title is "Punkt [number] ...]
  *
  * @return none
  */
function os2dagsorden_admin_suite_set_bullet_point_number(){
    $query = new EntityFieldQuery();
    $query->entityCondition('entity_type', 'node')
		->propertyCondition('type', array('os2web_meetings_bullet'))
		//->fieldCondition('field_os2web_meetings_bul_case', 'value', '')
		->range(0,1000);

    $result = $query->execute();


    if (isset($result['node'])) {
      $nids = array_keys($result['node']);
      foreach ($nids as $nid){
	$bullet_point = node_load($nid);
	$title = $bullet_point->title;
	print("<br/><br/>");
	print($title);
	$pos_of_1_brac = mb_strpos($title,'(');
	$pos_of_space_after_1_brac = mb_strpos($title,' ', $pos_of_1_brac);
	$pos_of_2_brac = mb_strpos($title,')');
	if ($pos_of_1_brac && $pos_of_2_brac){
	    print("<br/>");
	    $cut = mb_substr($title,$pos_of_1_brac+1, $pos_of_2_brac-$pos_of_1_brac-1);
	    print(' CUT: ' . $cut);
	    print("<br/>");
	    $case_nr = mb_substr($cut,0);//, mb_strpos($cut,' '));
	    print('CASE NR: ' . $case_nr);
	    print("<br/>");
	    $new_title = mb_substr($title, 0, $pos_of_1_brac-1) . mb_substr($title, $pos_of_2_brac+1);
	    print('NEW TITLE: ' . $new_title);

	    $bullet_point->title = $new_title;
	    $bullet_point->field_os2web_meetings_bul_case['und'][0]['value'] = $case_nr;
	    //if (isset($case_nr) && !empty($case_nr))
	    //    node_save($bullet_point);
	}
      }
    }

}

/**
  * Updates the all the files (and the notes they are attached to: either meeting or bullet point attachment)
  * which have url set as 'public://acadre/Files_...' to 'private:///Files...'
  *
  * @return none
  */
function os2dagsorden_admin_suite_update_files_path(){
  $files = entity_load('file');
  foreach ($files as $file){
    //add check of path
    print_r($file);
    print_r("<br/>");

    $public = 'public://acadre';
    $private = 'private://';

    //bullet_point_attachment
    $query = new EntityFieldQuery();
    $query->entityCondition('entity_type', 'node')
		->propertyCondition('type', array('os2web_meetings_bullet_attach'))
		->fieldCondition('field_os2web_meetings_bpa_file', 'fid', $file->fid, '=');
    $result = $query->execute();

    if (isset($result['node'])) {
	 $nids = array_keys($result['node']);
	 $bullet_point_attachment = reset(entity_load('node', $nids));

	 if (os2dagsorden_admin_suite_starts_with($file->uri, $public)){
	    $file->uri = str_replace($public,$private,$file->uri);
	    file_save($file);
	    node_save($bullet_point_attachment);
	    print_r("hit meeting bpa");
	    print_r("<br/><br/><br/>");
	    continue;
	 }
    }

    //meeting - opened
    $query = new EntityFieldQuery();
    $query->entityCondition('entity_type', 'node')
		->propertyCondition('type', array('os2web_meetings_meeting'))
		->fieldCondition('field_os2web_meetings_full_doc', 'fid', $file->fid, '=');
    $result = $query->execute();
    if (isset($result['node'])) {
	 $nids = array_keys($result['node']);
	 $meeting = reset(entity_load('node', $nids));

	 if (os2dagsorden_admin_suite_starts_with($file->uri, $public)){
	    $file->uri = str_replace($public,$private,$file->uri);
	    file_save($file);
	    node_save($meeting);
	    print_r("hit meeting closed");
	    print_r("<br/><br/><br/>");
	    continue;
	 }
    }

    //meeting - opened
    $query = new EntityFieldQuery();
    $query->entityCondition('entity_type', 'node')
		->propertyCondition('type', array('os2web_meetings_meeting'))
		->fieldCondition('field_os2web_meetings_full_doc_c', 'fid', $file->fid, '=');
    $result = $query->execute();
    if (isset($result['node'])) {
	 $nids = array_keys($result['node']);
	 $meeting = reset(entity_load('node', $nids));

	 if (os2dagsorden_admin_suite_starts_with($file->uri, $public)){
	    $file->uri = str_replace($public,$private,$file->uri);
	    file_save($file);
	    node_save($meeting);
	    print_r("hit meeting opened");
	    print_r("<br/><br/><br/>");
	    continue;
	 }
    }
  }
}


/**
  * Return is a string is starting with some other string
  *
  * @param string $haystack where to look
  * @param string $needle   what to look for
  *
  * @return TRUE of FALSE
  */
function os2dagsorden_admin_suite_starts_with($haystack, $needle)
{
    return !strncmp($haystack, $needle, strlen($needle));
}

function os2dagsorden_admin_suite_check_dblog(){
    watchdog('TEST', 'Unpublished test', WATCHDOG_INFO);
    err_debug('here');
    return 'here';
}

function os2dagsorden_admin_suite_add_meeting_files(){
   drupal_load('module', 'os2web_esdh_provider');
     module_load_include('inc', 'os2web_esdh_provider', 'os2web_esdh_provider.mmapi');
   foreach (file_scan_directory(variable_get('os2web_sbsys_esdh_mm_path', MM_IMPORT_DIR), '/\.xml$/i', array('recurse' => TRUE)) as $xml_file) {
    $agenda['pub_id'] = (int) str_replace('Publication', '', $xml_file->name);
    $agenda['uri'] = $xml_file->uri;
    $agenda['pdf_uri'] = dirname($agenda['uri']) .  "/Publication" . $agenda['pub_id'] . ".pdf";


   if (is_file(drupal_realpath($agenda['uri']))&& file_exists(drupal_realpath($agenda['pdf_uri']))) {
       $manifest = simplexml_load_string(file_get_contents(drupal_realpath($agenda['uri'])), 'SimpleXMLElement', LIBXML_NOCDATA);
       if (is_object($manifest)) {
           $sys_id = $manifest->xpath("Agendas/Agenda/@ID");
           $committee_name = $manifest->xpath("Agendas/Agenda/Committee/Name");
           $agenda['sys_id'] = (string) $sys_id[0][ID];
           $agenda['committee'] = (string) $committee_name[0];
           // Run check to see if meeting is already imported.
      // System ID is the same on all meetings.

          $query = new EntityFieldQuery();
          $result = $query->entityCondition('entity_type', 'node')
        ->propertyCondition('type', 'os2web_meetings_meeting')
        ->fieldCondition('field_os2web_meetings_system_id', 'value', $agenda['sys_id'], '=')
        ->execute();

      if (isset($result['node'])) {
        $nid = array_shift($result['node'])->nid;
        $meeting = node_load($nid);
        if (empty($meeting->field_os2web_meetings_full_doc['und'][0]['uri'])){

           if (FALSE !== ($file = _os2web_esdh_provider_import_file(array('uri' => $agenda['pdf_uri'], 'title' => $agenda['committee'])))) {

               $meeting->field_os2web_meetings_full_doc[LANGUAGE_NONE][0] = (array) $file;
                $meeting = node_submit($meeting);
                 node_save($meeting);
            }
        }
      }
    }
  }

 }
}
function os2dagsorden_admin_suite_update_meetings_type(){
  $nodes = entity_load('node', FALSE, array('type' => 'os2web_meetings_meeting'));
    foreach ($nodes as $node){
        if (os2dagsorden_access_helper_meeting_fully_converted($node)){
	    if (strcmp($node->field_os2web_meetings_type['und'][0]['value'], 'Dagsorden') == 0){
                  $node->field_os2web_meetings_type['und'][0]['value'] = "Dagsorden_plus";
            }
	    else if (strcmp($node->field_os2web_meetings_type['und'][0]['value'], 'Referat') == 0){
                  $node->field_os2web_meetings_type['und'][0]['value'] = "Referat_plus";
            }
	    node_submit($node);
	    node_save($node);
	}
    }
}

function os2dasorden_admin_suite_reschedule_file_adlib(){
    //getting all bullet_point_attachments
    $query = new EntityFieldQuery();
    $query->entityCondition('entity_type', 'node')
		->propertyCondition('type', array('os2web_meetings_bullet_attach'))
		->fieldCondition('field_os2web_meetings_bpa_file', 'fid', '', '!=');
		//->fieldCondition('field_os2web_meetings_bpa_html', 'fid', NULL)
		//->range(0,2000);
    $result = $query->execute();

    if (isset($result['node'])) {
	$nids = array_keys($result['node']);
	foreach($nids as $nid){
	    $bullet = node_load($nid);
	    if (!$bullet->field_os2web_meetings_bpa_html['und']){
		$file = file_load($bullet->field_os2web_meetings_bpa_file['und'][0]['fid']);
		if ($file->filemime !== 'application/pdf' && $file->filemime !== 'image/jpeg' && $file->filemime !== 'image/tiff' && $file->filemime !== 'text/html' && $file->filemime !== 'image/gif'){
		    print("<br/>");
		    print($file->filemime . ' ' . $file->fid . ' ' . $bullet->nid);
		    if ($file->fid) {
			//os2web_adlib_api_convert_to_pdf($file->fid);
		    }
		}
	    }
	}
    }
}

function os2dasorden_admin_suite_just_code () {
  $node = node_load(2804);
  dpm($node->field_os2web_meetings_bpa_body['und'][0]['safe_value']);
return 'here';

  }

  function os2dasorden_admin_suite_update_ldap_users() {
    $ldap_servers = ldap_servers_get_servers(NULL, 'enabled');
    // Get first server.
    $ldap_server = current($ldap_servers);
    // Run a search.

    $filters = variable_get('os2dagsorden_ad_integration_user_sync_filter', '');
    $attr = explode(',', variable_get('os2dagsorden_ad_integration_user_sync_attr', ''));
    $dn_str = 'OU=syddjurs,DC=intern,DC=syddjurs,DC=dk';
    $dn_str = 'CN=Lillian Steiniche,OU=Direktion,OU=syddjurs,DC=intern,DC=syddjurs,DC=dk ';

    $results = $ldap_server->search($dn_str, $filters, $attr);

    for ($i = 0; $i < $results["count"]; $i++) {
      $name = $results[$i]['mailnickname'][0];
      $mail = $results[$i]['mail'][0];
      if (!empty($results[$i]['displayname'][0]))
        $full_name = $results[$i]['displayname'][0];
      else
        $full_name = $full_name = $results[$i]['name'][0];
      if (!empty($mail) && !empty($name) && $name != "admin") {
        if ($u = user_load_by_name($name)) {
          if ($u->field_user_full_name['und'][0]['value'] != $full_name) {
            $u->field_user_full_name['und'][0]['value'] = $full_name;
            user_save($u);
            echo 'updated user ' . $name . '\n';
          }
        }
      }
    }

  }

function os2dagsorden_admin_suite_user_forbid_send_closed_bp($val) {
    if (!isset($val))
        $val=0;
    $query = new EntityFieldQuery();
    $result = $query->entityCondition('entity_type', 'user')
                    ->propertyCondition('status', 1)
                    ->fieldCondition('field_user_can_send_closed_bp', 'value', $val, '!=')
                    ->range(0,500)
                    ->execute();
    $users = user_load_multiple(array_keys($result['user']));

    foreach($users as $user){
        if (empty($user->name))
            continue;
        if ($user->field_user_can_send_closed_bp['und'][0]['value']!=$val) {
            $user->field_user_can_send_closed_bp['und'][0]['value']=$val;
        user_save($user);
        print_r($user->name);
        print_r ('<br/>');
        }
    }
    print_r ('done');
}
