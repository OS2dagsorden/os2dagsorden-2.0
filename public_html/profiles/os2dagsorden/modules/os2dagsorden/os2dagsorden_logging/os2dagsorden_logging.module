<?php

include_once 'os2dagsorden_logging.features.inc';

use Monolog\Logger;

/**
 * Implements hook_os2dagsorden_logging_channel_info().
 */
function os2dagsorden_logging_monolog_channel_info() {
  $channels = array();

  $channels['os2dagsorden_watchdog_logging'] = array(
    'label' => t('Os2dagsorden Watchdog Logging'),
    'description' => t('Channel that watchdog messages are routed through.'),
    'default profile' => 'os2dagsorden_logging_production',
  );

  return $channels;
}

/**
 * Implements hook_menu().
 */
function os2dagsorden_logging_menu() {
  $items['admin/config/development/monolog/os2dagsorden_logging_settings'] = array(
    'title' => 'Os2dagsorden Logging',
    'description' => t('Configure watchlist for specific watchdog log messages.'),
    'page callback' => 'drupal_get_form',
    'page arguments' => array('os2dagsorden_logging_settings_settings_form'),
    'access arguments' => array('administer os2web'),
    'file' => 'os2dagsorden_logging.admin.inc',
    'type' => MENU_LOCAL_TASK,
  );

  return $items;
}

/**
 * Implements hook_watchdog().
 * Makes sure that watchdog commands end up rerouted to monolog.
 *
 * @param array $log_entry
 */
function os2dagsorden_logging_watchdog(array $log_entry) {
  try {
    if (in_array($log_entry['type'], variable_get('os2dagsorden_logging_message_type', array(
      "acadre MM" => "acadre MM",
      "esdh provider" => "esdh provider"
    )))
    ) {

      // Perform a partial bootstrap if watchdog is called prior to the
      // DRUPAL_BOOTSTRAP_FULL phase.
      if (!function_exists('monolog')) {
        os2dagsorden_logging_bootstrap();
      }

      $logger = monolog('os2dagsorden_watchdog_logging');

      $enabled_contexts = os2dagsorden_logging_get_contexts();
      $context = array_intersect_key($log_entry, $enabled_contexts);
      if (isset($enabled_contexts['request_id'])) {
        $context['request_id'] = monolog_request_id();
      }
      $message = strip_tags(!isset($log_entry['variables']) ? $log_entry['message'] : strtr($log_entry['message'], $log_entry['variables']));
      $level = os2dagsorden_logging_map_severity_level($log_entry['severity']);
      $logger->log($level, $message, $context);
    }
  } catch (Exception $e) {
    // Fail silently since we cannot log any messages or do anything that would
    // trigger another watchdog call.
  }
}


/**
 * Ensure that required subsystems and modules are loaded if watchdog messages
 * are logged prior to a full Drupal bootstrap.
 *
 * @see _drupal_bootstrap_full()
 * @see http://drupal.org/node/1997462
 */
function os2dagsorden_logging_bootstrap() {
  static $bootstrapped = FALSE;
  if (!$bootstrapped) {
    $bootstrapped = TRUE;

    // CTools requires the drupal_get_path() and list_themes() functions.
    require_once DRUPAL_ROOT . '/includes/common.inc';
    require_once DRUPAL_ROOT . '/includes/theme.inc';
    require_once DRUPAL_ROOT . '/includes/unicode.inc';

    // Monolog requires the file_prepare_directory() function.
    require_once DRUPAL_ROOT . '/includes/file.inc';

    // Load the required modules.
    drupal_load('module', 'system');
    drupal_load('module', 'ctools');
    drupal_load('module', 'composer_manager');
    drupal_load('module', 'monolog');

    // Detect string handling method.
    unicode_check();

    // Undo magic quotes.
    fix_gpc_magic();

    // file_get_stream_wrappers() is called during the normal application flow.
  }
}

/**
 * Returns the selected event contexts.
 *
 * @return array
 */
function os2dagsorden_logging_get_contexts() {
  static $contexts = array();
  if (!$contexts) {
    $contexts = array_filter(variable_get('os2dagsorden_logging_contexts', array(
      'uid' => 'uid',
      'request_uri' => 'request_uri',
      'referer' => 'referer',
      'ip' => 'ip',
      'link' => 'link',
    )));
  }
  return $contexts;
}

/**
 * Maps a Watchdog severity level to Monolog severity levels.
 *
 * @param string $level
 *   The Watchdog severity level.
 *
 * @return int
 *   The Monolog severity level.
 */
function os2dagsorden_logging_map_severity_level($level) {
  $levels = array(
    WATCHDOG_DEBUG => Logger::DEBUG,
    WATCHDOG_INFO => Logger::INFO,
    WATCHDOG_NOTICE => Logger::NOTICE,
    WATCHDOG_WARNING => Logger::WARNING,
    WATCHDOG_ERROR => Logger::ERROR,
    WATCHDOG_CRITICAL => Logger::CRITICAL,
    WATCHDOG_ALERT => Logger::ALERT,
    WATCHDOG_EMERGENCY => Logger::EMERGENCY,
  );
  return isset($levels[$level]) ? $levels[$level] : Logger::NOTICE;
}

/**
 * Deletes entries from the database table os2web_print_send_to_friend_log, which are older than the certain number
 * of days - 100 days is default.
 */
function os2dagsorden_logging_database_log_clear() {
  $time_limit = strtotime('-' . variable_get('os2dagsorden_logging_day_limit', 100) . ' days');
  if (db_table_exists('os2web_print_send_to_friend_log')) {
    db_delete('os2web_print_send_to_friend_log')
      ->condition('time', $time_limit, '<')
      ->execute();
  }
}

/**
 * Implement hook_cron().
 */
function os2dagsorden_logging_cron() {
  os2dagsorden_logging_database_log_clear();
}

/**
 * Implements hook_cronapi().
 *
 * @param $op
 * @param null $job
 * @return array
 */
function os2dagsorden_logging_cronapi($op, $job = NULL) {
  switch ($op) {
    case 'list':
      return array('os2dagsorden_logging_cron' => t('Remove expired log messages and flood control events'));
  }
}

/**
 * Implements hook_requirements().
 */
function os2dagsorden_logging_requirements($phase) {
  if ($phase !== 'runtime') {
    return array();
  }
  $t = get_t();
  $channel_info = monolog_channel_info_load_all();
  foreach ($channel_info as $channel_name => $info) {
    $profile_info = (monolog_profile_load($info['default profile']));
    if (isset($profile_info->options['handlers']) && is_array($profile_info->options['handlers'])) {
      foreach ($profile_info->options['handlers'] as $handler_name => $options) {
        if ($handler_name == 'rotating_file_handler') {
          $requirements['os2dagsorden_logging_log_dir_' . $channel_name] = array(
            'title' => $t('OS2Dagsorden Logging'),
            'value' => $t('Log file directory')
          );
          if (!(is_dir(drupal_realpath(dirname($options['filepath']))) && is_writable(drupal_realpath(dirname($options['filepath']))))) {
            $requirements['os2dagsorden_logging_log_dir_' . $channel_name]['severity'] = REQUIREMENT_ERROR;
            $requirements['os2dagsorden_logging_log_dir_' . $channel_name]['description'] = t('Channel: %channel. Directory for log files <b>%path</b> is not exists or not writable.',
              array('%channel' => $channel_name, '%path' => dirname($options['filepath'])));
          }
          else {
            $requirements['os2dagsorden_logging_log_dir_' . $channel_name]['severity'] = REQUIREMENT_OK;
            $requirements['os2dagsorden_logging_log_dir_' . $channel_name]['description'] = t('Channel: %channel. Directory for log files <b>%path</b> is  exists and writable.',
              array('%channel' => $channel_name, '%path' => dirname($options['filepath'])));
          }
        }
      }
    }
  }
  return $requirements;
}