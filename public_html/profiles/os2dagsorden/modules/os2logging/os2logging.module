<?php
/**
 * @file
 * Code for the OS2Logging feature.
 */

include_once 'os2logging.features.inc';

use Monolog\Logger;
use Monolog\Handler\StreamHandler;

/*
 * Implements HOOK_menu()
 */

function os2logging_menu() {
  $items = array();

  $items['admin/config/os2logging'] = array(
      'title' => t('OS2 Logging Setup'),
      'description' => t('Set up OS2 Logging'),
      'access arguments' => array('access administration pages'),
      'page callback' => 'system_admin_menu_block_page',
      'file' => 'system.admin.inc',
      'file path' => drupal_get_path('module', 'system'),
      'type' => MENU_NORMAL_ITEM,
  );

  $items['admin/config/os2logging/settings'] = array(
      'title' => t('OS2 Logging Settings'),
      'description' => t('General description for OS2 Logging'),
      'access arguments' => array('access administration pages'),
      'page callback' => 'drupal_get_form',
      'page arguments' => array('os2logging_settings_form'),
      'type' => MENU_NORMAL_ITEM,
  );

  return $items;
}

function os2logging_monolog_channel_info() {
  $channels = array();

  $channels['os2logging'] = array(
      'label' => t('OS2Logging'),
      'description' => t('The default channel that os2logging messages are routed through.'),
      'default profile' => 'os2logging',
  );

  return $channels;
}

/*
 * Implements HOOK_node_load()
 */

function os2logging_node_load($nodes, $types) {
  global $user;

  $chosen_node_types = variable_get('os2logging_chosen_node_types');

  if (is_array($chosen_node_types)) {
    $logger = monolog('os2logging');
    $logger->pushProcessor(new \Monolog\Processor\WebProcessor);
    foreach ($nodes as $nid => $node) {
      if (in_array($node->type, $chosen_node_types))
        {
        $message = sprintf("node type:%s id:%d was loaded by user( uid:%s name:%s  e-mail:%s) \n\r", $node->type, $node->nid, $user->uid, $user->name, $user->email);
        $logger->log(Logger::INFO, $message, array());

        //watchdog('mytype', 'TEST', NULL, WATCHDOG_INFO, NULL);
        }
    }
  }
}

function os2logging_settings_form($form, $form_state) {
  $node_types = node_type_get_types();

  $form['os2logging-description'] = array(
      '#type' => 'markup',
      '#markup' => t('Choose the node types you wish to be monitored.'),
      '#prefix' => '<p>',
      '#suffix' => '<hr /></p>',
  );

  foreach ((array) $node_types as $nd) {
    $form['os2logging-type'][$nd->type] = array(
        '#type' => 'checkbox',
        '#title' => $nd->name,
        '#default_value' => _os2logging_node_type_chosen($nd->type),
    );
  }

  $form['#submit'][] = 'os2logging_settings_form_submit';
  return system_settings_form($form);
}

function os2logging_settings_form_submit($form, &$form_state) {
  $node_types = node_type_get_types();
  $chosen_node_types = array();

  foreach ($node_types as $n_type) {
    if ( $form_state['values'][$n_type->type] == '1' )
      {
      $chosen_node_types[] = $n_type->type;
      }
  }
  variable_set('os2logging_chosen_node_types', $chosen_node_types);
  variable_set('os2logging_log_file_path', $form_state['values']['os2logging-file-path']);
}

function _os2logging_node_type_chosen($node_type) {
  $types_list = variable_get('os2logging_chosen_node_types');
  return (is_array($types_list) && in_array($node_type, $types_list));
}
/**
 * Implements hook_help().
 */
function os2logging_help($path, $arg) {
  switch ($path) {
    case 'admin/help/os2logging':

      $filepath = dirname(__FILE__) . '/README.md';
      if (file_exists($filepath)) {
        $readme = file_get_contents($filepath);
      }
      else {
        $filepath = dirname(__FILE__) . '/README.txt';
        if (file_exists($filepath)) {
          $readme = file_get_contents($filepath);
        }
      }
      if (!isset($readme)) {
        return NULL;
      }
      if (module_exists('markdown')) {
        $filters = module_invoke('markdown', 'filter_info');
        $info = $filters['filter_markdown'];
    
        if (function_exists($info['process callback'])) {
          $output = $info['process callback']($readme, NULL);
        }
        else {
          $output = '<pre>' . $readme . '</pre>';
        }
      }
      else {
        $output = '<pre>' . $readme . '</pre>';
      }

      return $output;
  }
}

/**
 * Implements hook_watchdog().
 */
function os2logging_watchdog(array $log_entry) {
  try {

    // Perform a partial bootstrap if watchdog is called prior to the
    // DRUPAL_BOOTSTRAP_FULL phase.
    if (!function_exists('monolog') || !function_exists('monolog_logging_get_contexts')) {
      os2logging_bootstrap();
    }

    // Check whether to use the watchdog type as the channel name.
    // @see http://drupal.org/node/1990282
    if (variable_get('monolog_type_as_channel', 1)) {


   if (monolog_channel_info_load($log_entry['type']) ) {
      
        $logger = monolog($log_entry['type']);

        if ('Psr\Log\NullLogger' != get_class($logger)) {
          $enabled_contexts = monolog_logging_get_contexts();
          $context = array_intersect_key($log_entry, $enabled_contexts);
          if (isset($enabled_contexts['request_id'])) {
            $context['request_id'] = monolog_request_id();
          }

          $message = strip_tags(!isset($log_entry['variables']) ? $log_entry['message'] : strtr($log_entry['message'], $log_entry['variables']));
          $level = monolog_logging_map_severity_level($log_entry['severity']);
          $logger->log($level, $message, $context);
        }
      }
    }
  }

  catch (Exception $e) {
    // Fail silently since we cannot log any messages or do anything that would
    // trigger another watchdog call.
  }
}

/**
 * Ensure that required subsystems and modules are loaded if watchdog messages
 * are logged prior to a full Drupal bootstrap.
 *
 * @see _drupal_bootstrap_full()
 * @see http://drupal.org/node/1997462
 */
function os2logging_bootstrap() {
  static $bootstrapped = FALSE;
  if (!$bootstrapped) {
    $bootstrapped = TRUE;

    // CTools requires the drupal_get_path() and list_themes() functions.
    require_once DRUPAL_ROOT . '/includes/common.inc';
    require_once DRUPAL_ROOT . '/includes/theme.inc';
    require_once DRUPAL_ROOT . '/includes/unicode.inc';

    // Monolog requires the file_prepare_directory() function.
    require_once DRUPAL_ROOT . '/includes/file.inc';

    // Load the required modules.
    drupal_load('module', 'system');
    drupal_load('module', 'ctools');
    drupal_load('module', 'composer_manager');
    drupal_load('module', 'monolog');
    drupal_load('module', 'monolog_logging');

    // Detect string handling method.
    unicode_check();

    // Undo magic quotes.
    fix_gpc_magic();

    // file_get_stream_wrappers() is called during the normal application flow.
  }
}